import json
import logging.config
import os
import re
import sqlite3
import sys
from datetime import datetime
from urllib.parse import urlparse
import requests
from PyQt6.QtCore import (
    QUrl,
    QTimer,
    pyqtSignal,
    QThread,
    QStandardPaths,
    QByteArray,
    QBuffer,
    Qt,
    QSize,
)
from PyQt6.QtGui import QAction, QPixmap, QIcon, QColor, QPainter, QFont, QBrush
from PyQt6.QtWebEngineCore import (
    QWebEngineProfile,
    QWebEngineUrlRequestInterceptor,
    QWebEngineUrlRequestInfo,
    QWebEngineScript,
    QWebEngineSettings,
)
from PyQt6.QtWebEngineWidgets import QWebEngineView
from PyQt6.QtWebEngineCore import QWebEnginePage
from PyQt6.QtPrintSupport import QPrintDialog, QPrinter
from PyQt6.QtWidgets import (
    QApplication,
    QMainWindow,
    QTabWidget,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QPushButton,
    QToolBar,
    QStatusBar,
    QLineEdit,
    QFileDialog,
    QMenu,
    QListWidget,
    QInputDialog,
    QLabel,
    QDialog,
    QProgressBar,
    QTextEdit,
    QMessageBox,
    QListWidgetItem,
    QProgressDialog,
    QFormLayout,
    QComboBox,
    QGroupBox,
    QCheckBox,
    QScrollArea,
)
from config_loggin import logger_conf

logging.config.dictConfig(logger_conf)
logger = logging.getLogger("my_py_logger")
blocked_urls = []


class AdBlockRule:
    def __init__(self, rule_text):
        self.raw_rule = rule_text.strip()
        self.is_exception = self.raw_rule.startswith("@@")
        self.is_comment = self.raw_rule.startswith("!")
        self.is_html = "##" in self.raw_rule or "#@#" in self.raw_rule
        self.domain = None
        self.patterns = None
        self.options = {}
        self.safe_extensions = {
            ".ico",
            ".png",
            ".jpg",
            ".jpeg",
            ".gif",
            ".svg",
            ".css",
            ".ttf",
            ".woff",
            ".woff2",
        }
        if not self.is_comment and self.raw_rule:
            self.parse_rule()

    def matches_url(self, url, source_url=""):
        if self.is_comment or self.is_html:
            return False
        url_parts = urlparse(url)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        path = url_parts.path.lower()
        if any(path.endswith(ext) for ext in self.safe_extensions):
            return False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω
        if self.domain:
            domain_match = (
                url_parts.netloc.endswith(self.domain)
                or url_parts.netloc == self.domain
            )
            # –î–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ
            if domain_match and self.is_advertising_domain():
                return True
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å
            elif domain_match:
                return self.matches_path(url_parts.path)
            return False

        return self.matches_path(url_parts.path)

    def is_advertising_domain(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–º–µ–Ω —Ä–µ–∫–ª–∞–º–Ω—ã–º"""
        ad_domains = {
            "doubleclick.net",
            "googlesyndication.com",
            "adnxs.com",
            "advertising.com",
            "admob.com",
            "ads.yahoo.com",
        }
        return self.domain in ad_domains

    def matches_path(self, path):
        if not self.pattern:
            return False
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –∫–æ—Ä–Ω—é —Å–∞–π—Ç–∞
        if path in ("/", ""):
            return False
        pattern = re.escape(self.pattern)
        pattern = pattern.replace(r"\\\*", ".*")
        pattern = pattern.replace(r"\\^", r"[^a-zA-Z0-9._-]")
        try:
            return bool(re.search(pattern, path))
        except re.error:
            return False

    def parse_rule(self):
        # –£–¥–∞–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        rule = self.raw_rule[2:] if self.is_exception else self.raw_rule
        # –†–∞–∑–±–∏—Ä–∞–µ–º –æ–ø—Ü–∏–∏
        if "$" in rule:
            rule, options = rule.split("$", 1)
            self.parse_options(options)
        # –†–∞–∑–±–∏—Ä–∞–µ–º HTML-–ø—Ä–∞–≤–∏–ª–∞
        if self.is_html:
            if "##" in rule:
                self.domain, self.pattern = rule.split("##", 1)
            elif "#@#" in rule:
                self.domain, self.pattern = rule.split("#@#", 1)
                self.is_exception = True
        else:
            # –†–∞–∑–±–∏—Ä–∞–µ–º –æ–±—ã—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
            self.pattern = rule
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if self.pattern.startswith("||"):
                self.pattern = self.pattern[2:]
                domain_end = self.pattern.find("/")
                if domain_end == -1:
                    domain_end = len(self.pattern)
                self.domain = self.pattern[:domain_end]
                self.pattern = self.pattern[domain_end:]
            elif self.pattern.startswith("|"):
                self.pattern = self.pattern[1:]

    def parse_options(self, options_text):
        for option in options_text.split(","):
            if "=" in option:
                key, value = option.split("=", 1)
                self.options[key] = value
            else:
                self.options[option] = True


class AdBlockInterceptor(QWebEngineUrlRequestInterceptor):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.rules = []
        # self.blocked_urls = []  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.load_default_rules()
        self.safe_domains = {
            "google.com",
            "googleapis.com",
            "gstatic.com",
            "github.com",
            "githubusercontent.com",
            "cdn.jsdelivr.net",
            "cloudflare.com",
            "jquery.com",
            "bootstrap.com",
        }
        logger.info("‚úÖ AdBlock –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–∑–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏")

    def load_default_rules(self):
        # –ú–Ø–ì–ö–ò–ï –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã
        basic_rules = [
            # –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –æ—á–µ–≤–∏–¥–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–µ—Ç–∏
            "||doubleclick.net/ads/",
            "||googlesyndication.com/pagead/",
            "||adnxs.com^$third-party",
            "||advertising.com^$third-party",
            # –Ø–≤–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø—É—Ç–∏
            "/ads/",
            "/advertisements/",
            "/banner/",
            "/popup/",
        ]
        # –†–ê–°–®–ò–†–ï–ù–ù–´–ï –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        exceptions = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            "@@||google.com^",
            "@@||googleapis.com^",
            "@@||gstatic.com^",
            "@@||googleusercontent.com^",
            "@@||youtube.com^",
            "@@||ytimg.com^",
            "@@||github.com^",
            "@@||githubusercontent.com^",
            "@@||cdn.jsdelivr.net^",
            "@@||cdnjs.cloudflare.com^",
            "@@||cloudflare.com^",
            "@@||jquery.com^",
            "@@||bootstrap.com^",
            "@@||fontawesome.com^",
            "@@||fonts.googleapis.com^",
            "@@||fonts.gstatic.com^",
            "@@||ru2.elvenar.com^",
            "@@||ru0.elvenar.com^",
            "@@||ru15.forgeofempires.com^",
            "@@||ru0.forgeofempires.com^",
            # –†–µ—Å—É—Ä—Å—ã
            "@@/favicon.",
            "@@.css",
            "@@.js",
            "@@.png",
            "@@.jpg",
            "@@.jpeg",
            "@@.svg",
            "@@.gif",
            "@@.ico",
            "@@.woff",
            "@@.woff2",
            "@@.ttf",
            "@@.eot",
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–æ–º–µ–Ω—ã
            "@@||wikipedia.org^",
            "@@||stackoverflow.com^",
            "@@||reddit.com^",
            "@@||twitter.com^",
            "@@||facebook.com^",
            "@@||instagram.com^",
            "@@||linkedin.com^",
            "@@||discord.com^",
            "@@||telegram.org^",
            "@@||whatsapp.com^",
            "@@||ru2.elvenar.com^",
            "@@||ru0.elvenar.com^",
            "@@||ru15.forgeofempires.com^",
            "@@||ru0.forgeofempires.com^",
        ]
        self.parse_rules("\n".join(basic_rules + exceptions))
        # print("EasyList –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        try:
            response = requests.get(
                "https://easylist.to/easylist/easylist.txt", timeout=5
            )
            if response.status_code == 200:
                self.parse_rules(response.text)
                # print("EasyList –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                logger.info("‚úÖ EasyList –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            # print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ EasyList: {e}")
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ EasyList: {e}")

    def parse_rules(self, rules_text):
        for line in rules_text.splitlines():
            line = line.strip()
            if line and not line.startswith("!"):
                rule = AdBlockRule(line)
                if not rule.is_comment:
                    self.rules.append(rule)

    def interceptRequest(self, info):
        url = info.requestUrl().toString()
        url_parts = urlparse(url)
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        safe_domains_extended = self.safe_domains.union(
            {
                "youtube.com",
                "ytimg.com",
                "googleusercontent.com",
                "wikipedia.org",
                "stackoverflow.com",
                "reddit.com",
                "twitter.com",
                "facebook.com",
                "instagram.com",
                "linkedin.com",
                "discord.com",
                "telegram.org",
                "whatsapp.com",
                "fontawesome.com",
                "fonts.googleapis.com",
                "fonts.gstatic.com",
                "cdnjs.cloudflare.com",
                "elvenar.com",
                "forgeofempires.com",
                "ru2.elvenar.com",
                "ru0.elvenar.com",
                "ru15.forgeofempires.com",
                "ru0.forgeofempires.com",
            }
        )
        if any(url_parts.netloc.endswith(domain) for domain in safe_domains_extended):
            return
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
        path = url_parts.path.lower()
        static_extensions = (
            ".css",
            ".js",
            ".png",
            ".jpg",
            ".jpeg",
            ".gif",
            ".svg",
            ".ico",
            ".woff",
            ".woff2",
            ".ttf",
            ".eot",
            ".json",
            ".xml",
        )
        if "/favicon." in path or path.endswith(static_extensions):
            return
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É—Ç–∏ —Å–∞–π—Ç–æ–≤
        if path in ("/", "", "/index.html", "/home", "/main"):
            return
        # –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        for rule in self.rules:
            if rule.is_exception and rule.matches_url(url):
                return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —è–≤–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã
        for rule in self.rules:
            if not rule.is_exception and not rule.is_html and rule.matches_url(url):
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω—É—é —Ä–µ–∫–ª–∞–º—É
                if any(
                    ad_word in url.lower()
                    for ad_word in [
                        "/ads/",
                        "/ad/",
                        "/advertisement/",
                        "/banner/",
                        "/popup/",
                    ]
                ):
                    info.block(True)
                    blocked_urls.append(url)
                    # print(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ä–µ–∫–ª–∞–º–Ω—ã–π URL: {url}")
                    return

    def get_blocked_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö URL"""
        return len(blocked_urls)

    def clear_blocked_stats(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        blocked_urls.clear()


class LegacyAdBlocker(QWebEngineUrlRequestInterceptor):
    """–°—Ç–∞—Ä—ã–π –∫–ª–∞—Å—Å AdBlocker –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.blocked_domains = {
            "googleads.g.doubleclick.net",
            "googlesyndication.com",
            "google-analytics.com",
            "facebook.com/tr",
            "ads.yahoo.com",
            "amazon-adsystem.com",
            "adsystem.amazon.com",
            "pagead2.googlesyndication.com",
            "googletagmanager.com",
            "googletagservices.com",
        }
        self.blocked_keywords = [
            "/ads/",
            "/ad/",
            "/banner/",
            "/popup/",
            "/advert/",
            "/adsystem/",
            "/googletag/",
            "/doubleclick/",
            "/analytics/",
            "/facebook.com/tr",
            "ads.js",
            "adsbygoogle",
            "googletagmanager",
            "googletagservices",
            "amazon-adsystem",
            "criteo",
            "outbrain",
            "taboola",
            "prebid",
        ]
        logger.info("LegacyAdBlocker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–∑–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏")

    def interceptRequest(self, info):
        url = info.requestUrl().toString().lower()
        # –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º Google –¥–æ–º–µ–Ω—ã
        if any(
            google_domain in url
            for google_domain in [
                "google.com",
                "googleapis.com",
                "googleusercontent.com",
                "gstatic.com",
                "ru2.elvenar.com",
                "ru15.forgeofempires.com",
            ]
        ):
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω—ã
        for domain in self.blocked_domains:
            if domain in url:
                info.block(True)
                return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤
        resource_type = info.resourceType()
        if resource_type in [
            QWebEngineUrlRequestInfo.ResourceType.ResourceTypeScript,
            QWebEngineUrlRequestInfo.ResourceType.ResourceTypeImage,
            QWebEngineUrlRequestInfo.ResourceType.ResourceTypeSubFrame,
        ]:
            for keyword in self.blocked_keywords:
                if keyword in url:
                    info.block(True)
                    return


class BrowserProfile:
    def __init__(self, profile_name="default"):
        self.profile_name = profile_name

        documents_path = QStandardPaths.writableLocation(
            QStandardPaths.StandardLocation.AppDataLocation
        )

        self.profile_dir = os.path.join(documents_path, "profiles", profile_name)

        logger.info(
            f"üìÅ –ü—Ä–æ—Ñ–∏–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {self.profile_dir}"
        )
        # print(f"üìÅ –ü—É—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é: {self.profile_dir}")
        try:
            # –î–∞–∂–µ –¥–ª—è "default" —Å–æ–∑–¥–∞–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            # actual_profile_name = (
            #     f"ollegra_{profile_name}" if profile_name == "default" else profile_name
            # )
            self.profile = QWebEngineProfile(self.profile_name)
            self.profile.setPersistentStoragePath(self.profile_dir)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            # self.profile.setPersistentCookiesPolicy(
            #    QWebEngineProfile.PersistentCookiesPolicy.ForcePersistentCookies
            # )
            # self.profile.setHttpCacheType(QWebEngineProfile.HttpCacheType.DiskHttpCache)
            # self.profile.setCachePath(self.profile_dir)  # –ö—ç—à
            # self.profile.setPersistentStoragePath(
            #    self.profile_dir
            # )  # –î–∞–Ω–Ω—ã–µ (cookies, IndexedDB –∏ —Ç.–¥.)

            # //? –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            # self.profile.setPersistentCookiesPolicy(
            #     QWebEngineProfile.PersistentCookiesPolicy.ForcePersistentCookies
            # )

            # print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{self.profile_name}' —Å–æ–∑–¥–∞–Ω —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º")
            logger.info(
                f"‚ö° –ü—Ä–æ—Ñ–∏–ª—å '{self.profile_name}' —Å–æ–∑–¥–∞–Ω —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º"
            )

        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            self.profile = QWebEngineProfile("fallback_profile")
            self.profile.setPersistentStoragePath(self.profile_dir)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫
        self.profile.downloadRequested.connect(self.handle_download)
        # –ü—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_download_path = QStandardPaths.writableLocation(
            QStandardPaths.StandardLocation.DownloadLocation
        )
        # self.profile.cookieStore().cookieAdded.connect(self.handle_cookie)

        # –°–æ–∑–¥–∞–µ–º AdBlock –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        self.interceptor = AdBlockInterceptor()
        self.profile.setUrlRequestInterceptor(self.interceptor)
        # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–ª–∞–≥–∏–Ω–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.setup_profile_settings()
        # –î–æ–±–∞–≤–ª—è–µ–º JavaScript –¥–ª—è HTML-–ø—Ä–∞–≤–∏–ª
        self.setup_html_filters()

    def handle_cookie(self, cookie):
        # print("cookieAdded triggered")
        name = bytes(cookie.name()).decode()
        value = bytes(cookie.value()).decode()
        domain = cookie.domain()
        logger.info(f"üç™ Cookie –¥–æ–±–∞–≤–ª–µ–Ω: {name} = {value} (–¥–æ–º–µ–Ω: {domain})")

    def setup_profile_settings(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è"""
        settings = self.profile.settings()

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        settings.setAttribute(QWebEngineSettings.WebAttribute.PluginsEnabled, True)
        settings.setAttribute(
            QWebEngineSettings.WebAttribute.FullScreenSupportEnabled, True
        )
        settings.setAttribute(QWebEngineSettings.WebAttribute.JavascriptEnabled, True)
        settings.setAttribute(QWebEngineSettings.WebAttribute.WebGLEnabled, True)
        settings.setAttribute(QWebEngineSettings.WebAttribute.PdfViewerEnabled, True)
        settings.setAttribute(
            QWebEngineSettings.WebAttribute.HyperlinkAuditingEnabled, True
        )
        settings.setAttribute(
            QWebEngineSettings.WebAttribute.AutoLoadIconsForPage, True
        )
        settings.setAttribute(QWebEngineSettings.WebAttribute.TouchIconsEnabled, True)

        # –ö–†–ò–¢–ò–ß–ù–û: –í–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        settings.setAttribute(QWebEngineSettings.WebAttribute.LocalStorageEnabled, True)
        settings.setAttribute(
            QWebEngineSettings.WebAttribute.LocalContentCanAccessRemoteUrls, True
        )
        settings.setAttribute(
            QWebEngineSettings.WebAttribute.LocalContentCanAccessFileUrls, True
        )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
        settings.setDefaultTextEncoding("utf-8")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞ –∏ —Ä–µ–≥–∏–æ–Ω–∞
        self.profile.setHttpAcceptLanguage("ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π User-Agent
        # self.profile.setHttpUserAgent(
        #    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
        #    "(KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"
        # )

        # –í–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.profile.setHttpCacheType(QWebEngineProfile.HttpCacheType.DiskHttpCache)
        self.profile.setHttpCacheMaximumSize(100 * 1024 * 1024)  # 100MB

        # print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

        self.setup_html_filters()

    def setup_html_filters(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é HTML-—ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        html_rules = """
        function applyAdBlockRules() {
            const rules = %s;
            rules.forEach(rule => {
                try {
                    const elements = document.querySelectorAll(rule);
                    elements.forEach(element => {
                        element.style.display = 'none';
                    });
                } catch (e) {
                    console.log('Invalid selector:', rule);
                }
            });
        }
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        document.addEventListener('DOMContentLoaded', applyAdBlockRules);
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        const observer = new MutationObserver(applyAdBlockRules);
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
        """
        # –°–æ–±–∏—Ä–∞–µ–º HTML-—Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ –ø—Ä–∞–≤–∏–ª
        html_selectors = [
            rule.patterns
            for rule in self.interceptor.rules
            if rule.is_html and not rule.is_exception
        ]
        # –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç
        script = QWebEngineScript()
        script.setName("adblock_html")
        script.setSourceCode(html_rules % json.dumps(html_selectors))
        script.setInjectionPoint(QWebEngineScript.InjectionPoint.DocumentCreation)
        script.setWorldId(QWebEngineScript.ScriptWorldId.MainWorld)
        script.setRunsOnSubFrames(True)

        self.profile.scripts().insert(script)

    def add_custom_rule(self, rule_text):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ"""
        rule = AdBlockRule(rule_text)
        if not rule.is_comment:
            self.interceptor.rules.append(rule)
        # –û–±–Ω–æ–≤–ª—è–µ–º HTML-—Ñ–∏–ª—å—Ç—Ä—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if rule.is_html:
            self.setup_html_filters()

    def handle_download(self, download):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—Ä–∞—É–∑–µ—Ä–∞
            parent_browser = self.get_parent_browser()
            if parent_browser:
                custom_download_path = parent_browser.db_manager.get_setting(
                    "download_path", ""
                )
                if custom_download_path and os.path.exists(custom_download_path):
                    self.default_download_path = custom_download_path
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs(self.default_download_path, exist_ok=True)

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = download.suggestedFileName()
            if not filename:
                filename = "download"
            # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            download_path = os.path.join(self.default_download_path, filename)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            counter = 1
            original_path = download_path
            while os.path.exists(download_path):
                name, ext = os.path.splitext(original_path)
                download_path = f"{name}_{counter}{ext}"
                counter += 1
            # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –î–û –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            try:
                download.setDownloadDirectory(os.path.dirname(download_path))
                download.setDownloadFileName(os.path.basename(download_path))
            except Exception as e:
                # print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                logger.error(f"üÜò –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º setPath –¥–ª—è PyQt6
                try:
                    download.setPath(download_path)
                except Exception as e2:
                    # print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Ç—å —á–µ—Ä–µ–∑ setPath: {e2}")
                    logger.error(f"üÜò –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Ç—å —á–µ—Ä–µ–∑ setPath: {e2}")

            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏
            parent_browser = self.get_parent_browser()
            if parent_browser:
                parent_browser.show_download_progress(download, filename, download_path)

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–æ–≤)
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤
                if hasattr(download, "downloadProgress"):
                    download.downloadProgress.connect(
                        lambda bytes_received,
                        bytes_total: self.update_download_progress(
                            download, bytes_received, bytes_total, filename
                        )
                    )
                elif hasattr(download, "receivedBytesChanged"):
                    download.receivedBytesChanged.connect(
                        lambda: self.update_download_progress_simple(download, filename)
                    )

                if hasattr(download, "finished"):
                    download.finished.connect(
                        lambda: self.download_finished(download, download_path)
                    )
                elif hasattr(download, "stateChanged"):
                    download.stateChanged.connect(
                        lambda state: self.download_state_changed(
                            download, state, download_path
                        )
                    )

            except Exception as e:
                # print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                logger.error(f"üÜò –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            download.accept()
            # print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞—Ç–∞: {filename} -> {download_path}")
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞—Ç–∞: {filename} -> {download_path}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            self.show_download_started(filename)
        except Exception as e:
            # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            try:
                download.accept()  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            except Exception as e:
                # print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–≥—Ä—É–∑–∫—É: {e}")
                logger.error(f"üÜò –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–≥—Ä—É–∑–∫—É: {e}")

    def update_download_progress(self, download, bytes_received, bytes_total, filename):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
        if bytes_total > 0:
            progress = int((bytes_received / bytes_total) * 100)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
            mb_received = bytes_received / (1024 * 1024)
            mb_total = bytes_total / (1024 * 1024)

            status_text = f"–ó–∞–≥—Ä—É–∑–∫–∞ {filename}: {progress}% ({mb_received:.1f}/{mb_total:.1f} MB)"

            # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
            parent_browser = self.get_parent_browser()
            if parent_browser:
                parent_browser.update_status_bar(status_text)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–µ
                parent_browser.progress_bar.setValue(progress)
                parent_browser.progress_bar.setVisible(True)

    def update_download_progress_simple(self, download, filename):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è PyQt6"""
        try:
            if hasattr(download, "receivedBytes") and hasattr(download, "totalBytes"):
                bytes_received = download.receivedBytes()
                bytes_total = download.totalBytes()

                # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
                parent_browser = self.get_parent_browser()

                if bytes_total > 0:
                    progress = int((bytes_received / bytes_total) * 100)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
                    if parent_browser and download in parent_browser.active_downloads:
                        parent_browser.active_downloads[download]["progress"] = progress

                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        dialog = parent_browser.active_downloads[download].get("dialog")
                        if dialog:
                            dialog.setValue(progress)

                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
                            mb_received = bytes_received / (1024 * 1024)
                            mb_total = bytes_total / (1024 * 1024)
                            dialog.setLabelText(
                                f"–ó–∞–≥—Ä—É–∑–∫–∞: {filename}\n{progress}% ({mb_received:.1f}/{mb_total:.1f} MB)"
                            )

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    mb_received = bytes_received / (1024 * 1024)
                    mb_total = bytes_total / (1024 * 1024)

                    status_text = f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ {filename}: {progress}% ({mb_received:.1f}/{mb_total:.1f} MB)"

                    if parent_browser:
                        parent_browser.update_status_bar(status_text)

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–µ
                        parent_browser.progress_bar.setValue(progress)
                        parent_browser.progress_bar.setVisible(True)
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if parent_browser:
                        parent_browser.update_status_bar(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ {filename}...")
                        parent_browser.progress_bar.setVisible(True)
                        parent_browser.progress_bar.setRange(
                            0, 0
                        )  # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        except Exception as e:
            # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    def download_state_changed(self, download, state, download_path):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            if hasattr(download, "DownloadState"):
                if state == download.DownloadState.DownloadCompleted:
                    self.download_finished(download, download_path)
                elif state == download.DownloadState.DownloadCancelled:
                    parent_browser = self.get_parent_browser()
                    if parent_browser:
                        parent_browser.progress_bar.setVisible(False)
                        parent_browser.update_status_bar("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                elif state == download.DownloadState.DownloadInterrupted:
                    parent_browser = self.get_parent_browser()
                    if parent_browser:
                        parent_browser.progress_bar.setVisible(False)
                        parent_browser.update_status_bar("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        except Exception as e:
            # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    def download_finished(self, download, download_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
        parent_browser = self.get_parent_browser()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
        download_info = None
        if parent_browser and download in parent_browser.active_downloads:
            download_info = parent_browser.active_downloads[download]

        filename = download_info.get("filename", "—Ñ–∞–π–ª") if download_info else "—Ñ–∞–π–ª"

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if download_info and "dialog" in download_info:
            dialog = download_info["dialog"]
            dialog.close()

        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        if parent_browser:
            parent_browser.progress_bar.setVisible(False)

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        if parent_browser and download in parent_browser.active_downloads:
            del parent_browser.active_downloads[download]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            download_state = download.state()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å—á–∏—Ç–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —É—Å–ø–µ—à–Ω–æ–π
            download_successful = False
            if os.path.exists(download_path) and os.path.getsize(download_path) > 0:
                download_successful = True

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è WebP —Ñ–∞–π–ª–æ–≤
                if download_path.lower().endswith(".webp"):
                    # print(f"‚úÖ WebP —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}")
                    logger.info(f"‚úÖ WebP —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}")

            if download_successful:
                # –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
                if parent_browser:
                    file_ext = os.path.splitext(filename)[1].lower()
                    if file_ext == ".webp":
                        parent_browser.update_status_bar(
                            f"‚úÖ WebP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {filename}"
                        )
                    else:
                        parent_browser.update_status_bar(
                            f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {filename}"
                        )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –∑–∞–≥—Ä—É–∑–æ–∫
                if parent_browser and hasattr(parent_browser, "download_manager"):
                    url = getattr(download, "url", lambda: download_path)()
                    if hasattr(url, "toString"):
                        url = url.toString()
                    parent_browser.download_manager.download_completed(
                        url, download_path, True
                    )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                if parent_browser:
                    try:
                        url = getattr(download, "url", lambda: download_path)()
                        if hasattr(url, "toString"):
                            url = url.toString()
                        parent_browser.db_manager.update_download_status(
                            url, download_path, "completed"
                        )
                    except Exception as e:
                        # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î: {e}")
                        logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î: {e}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–æ—Ä–º–∞—Ç–µ
                if parent_browser:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Icon.Information)
                    msg.setWindowTitle("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                    file_ext = os.path.splitext(filename)[1].lower()
                    if file_ext == ".webp":
                        msg.setText(f"WebP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {filename}")
                        msg.setInformativeText(
                            f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {download_path}\n\nWebP - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ö–æ—Ä–æ—à–∏–º —Å–∂–∞—Ç–∏–µ–º."
                        )
                    elif file_ext in [
                        ".jpg",
                        ".jpeg",
                        ".png",
                        ".gif",
                        ".bmp",
                        ".svg",
                        ".ico",
                        ".tiff",
                    ]:
                        msg.setText(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {filename}")
                        msg.setInformativeText(
                            f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {download_path}\n\n–§–æ—Ä–º–∞—Ç: {file_ext.upper()}"
                        )
                    else:
                        msg.setText(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}")
                        msg.setInformativeText(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {download_path}")

                    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                    open_file_button = msg.addButton(
                        "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", QMessageBox.ButtonRole.ActionRole
                    )
                    open_folder_button = msg.addButton(
                        "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", QMessageBox.ButtonRole.ActionRole
                    )
                    show_downloads_button = msg.addButton(
                        "–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑–æ–∫", QMessageBox.ButtonRole.ActionRole
                    )
                    msg.addButton("OK", QMessageBox.ButtonRole.AcceptRole)

                    msg.exec()

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
                    if msg.clickedButton() == open_file_button:
                        try:
                            import subprocess
                            import platform

                            system = platform.system()
                            if system == "Windows":
                                os.startfile(download_path)
                            elif system == "Darwin":  # macOS
                                subprocess.run(["open", download_path])
                            else:  # Linux
                                subprocess.run(["xdg-open", download_path])
                        except Exception as e:
                            # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                    elif msg.clickedButton() == open_folder_button:
                        self.open_download_folder(download_path)
                    elif msg.clickedButton() == show_downloads_button:
                        parent_browser.show_downloads()

            else:
                # –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                if parent_browser:
                    parent_browser.update_status_bar("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")

        except Exception as e:
            # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
            if os.path.exists(download_path) and os.path.getsize(download_path) > 0:
                if parent_browser:
                    parent_browser.update_status_bar(
                        f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {filename}"
                    )
            else:
                if parent_browser:
                    parent_browser.update_status_bar("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")

    def open_download_folder(self, file_path):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º"""
        try:
            import subprocess
            import platform

            system = platform.system()
            if system == "Windows":
                subprocess.run(["explorer", "/select,", file_path])
            elif system == "Darwin":  # macOS
                subprocess.run(["open", "-R", file_path])
            else:  # Linux
                subprocess.run(["xdg-open", os.path.dirname(file_path)])
        except Exception as e:
            # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏: {e}")
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏: {e}")
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –æ—Ç–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫—É
            try:
                import webbrowser

                webbrowser.open(f"file://{os.path.dirname(file_path)}")
            except Exception as e2:
                # print(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
                logger.error(f"üÜò –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")

    def show_download_started(self, filename):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
        parent_browser = self.get_parent_browser()
        if parent_browser:
            parent_browser.update_status_bar(f"üì• –ù–∞—á–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∞: {filename}")

    def get_parent_browser(self):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞"""
        # –ò—â–µ–º —Å—Ä–µ–¥–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
        for widget in QApplication.topLevelWidgets():
            if hasattr(widget, "update_status_bar") and hasattr(
                widget, "active_downloads"
            ):
                return widget
        return None

    def get_profile(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å WebEngine"""
        return self.profile

    def set_adblock_enabled(self, enabled):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç AdBlock –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        if enabled:
            self.profile.setUrlRequestInterceptor(self.interceptor)
        else:
            self.profile.setUrlRequestInterceptor(None)

    def get_adblock_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        return self.interceptor.get_blocked_count()

    def clear_adblock_stats(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        self.interceptor.clear_blocked_stats()

    def backup_profile_data(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            import shutil

            backup_dir = os.path.join(self.profile_dir, "backup")
            os.makedirs(backup_dir, exist_ok=True)

            # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
            for file_pattern in [
                "Cookies",
                "Local Storage",
                "Session Storage",
                "IndexedDB",
            ]:
                source_path = os.path.join(self.profile_dir, file_pattern)
                if os.path.exists(source_path):
                    if os.path.isdir(source_path):
                        shutil.copytree(
                            source_path,
                            os.path.join(backup_dir, file_pattern),
                            dirs_exist_ok=True,
                        )
                    else:
                        shutil.copy2(source_path, backup_dir)

            # print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–∑–¥–∞–Ω–∞: {backup_dir}")
            logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–∑–¥–∞–Ω–∞: {backup_dir}")
            return backup_dir
        except Exception as e:
            # print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return None

    def get_profile_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ"""
        info = {
            "name": self.profile_name,
            "path": self.profile_dir,
            "cache_path": self.profile.cachePath(),
            "persistent_storage_path": self.profile.persistentStoragePath(),
            "cookies_policy": self.profile.persistentCookiesPolicy(),
            "cache_type": self.profile.httpCacheType(),
            "cache_max_size": self.profile.httpCacheMaximumSize(),
        }
        return info


class DatabaseManager:
    def __init__(self, db_path="browser_data.db"):
        self.db_path = db_path
        try:
            self.init_database()

        except Exception as e:
            logger.error("üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %s", e)
            logger.info("üö© –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            self.repair_database()

    def init_database(self):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    url TEXT NOT NULL,
                    title TEXT,
                    icon BLOB,
                    visit_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS bookmarks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    url TEXT NOT NULL,
                    title TEXT,
                    icon BLOB,
                    is_favorite BOOLEAN DEFAULT 0,
                    added_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS downloads (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    url TEXT NOT NULL,
                    file_path TEXT,
                    start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    status TEXT DEFAULT 'downloading'
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS settings (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )
            """)

            # –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            # self.migrate_database(cursor)
            conn.commit()
            logger.info("‚úÖ Database –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    def migrate_database(self, cursor):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ added_time –≤ —Ç–∞–±–ª–∏—Ü–µ bookmarks
            cursor.execute("PRAGMA table_info(bookmarks)")
            columns = [column[1] for column in cursor.fetchall()]

            if "added_time" not in columns:
                logger.info("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É added_time –≤ —Ç–∞–±–ª–∏—Ü—É bookmarks...")
                cursor.execute("""
                    ALTER TABLE bookmarks 
                    ADD COLUMN added_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                """)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
                cursor.execute("""
                    UPDATE bookmarks 
                    SET added_time = CURRENT_TIMESTAMP 
                    WHERE added_time IS NULL
                """)
                logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è bookmarks –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É icon –¥–ª—è bookmarks
            if "icon" not in columns:
                logger.info("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É icon –≤ —Ç–∞–±–ª–∏—Ü—É bookmarks...")
                cursor.execute("""
                    ALTER TABLE bookmarks 
                    ADD COLUMN icon BLOB
                """)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É is_favorite –¥–ª—è bookmarks
            if "is_favorite" not in columns:
                logger.info("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É is_favorite –≤ —Ç–∞–±–ª–∏—Ü—É bookmarks...")
                cursor.execute("""
                    ALTER TABLE bookmarks 
                    ADD COLUMN is_favorite BOOLEAN DEFAULT 0
                """)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É history
            cursor.execute("PRAGMA table_info(history)")
            history_columns = [column[1] for column in cursor.fetchall()]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É icon –¥–ª—è history
            if "icon" not in history_columns:
                logger.info("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É icon –≤ —Ç–∞–±–ª–∏—Ü—É history...")
                cursor.execute("""
                    ALTER TABLE history 
                    ADD COLUMN icon BLOB
                """)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É visit_time –¥–ª—è history (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
            if "visit_time" not in history_columns:
                logger.info("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É visit_time –≤ —Ç–∞–±–ª–∏—Ü—É history...")
                cursor.execute("""
                    ALTER TABLE history 
                    ADD COLUMN visit_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                """)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
                cursor.execute("""
                    UPDATE history 
                    SET visit_time = datetime('now', 'localtime') 
                    WHERE visit_time IS NULL
                """)

        except sqlite3.Error as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            # –ï—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            try:
                cursor.execute("DROP TABLE IF EXISTS bookmarks")
                cursor.execute("""
                    CREATE TABLE bookmarks (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        url TEXT NOT NULL,
                        title TEXT,
                        icon BLOB,
                        is_favorite BOOLEAN DEFAULT 0,
                        added_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                cursor.execute("DROP TABLE IF EXISTS history")
                cursor.execute("""
                    CREATE TABLE history (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        url TEXT NOT NULL,
                        title TEXT,
                        icon BLOB,
                        visit_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∫–æ–Ω–æ–∫!")
            except sqlite3.Error as e2:
                logger.error(f"üÜò –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e2}")

    def icon_to_blob(self, icon):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç QIcon –≤ BLOB –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if icon and not icon.isNull():
            pixmap = icon.pixmap(16, 16)
            byte_array = QByteArray()
            buffer = QBuffer(byte_array)
            buffer.open(QBuffer.OpenModeFlag.WriteOnly)
            pixmap.save(buffer, "PNG")
            return byte_array.data()
        return None

    def blob_to_icon(self, blob_data):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç BLOB –æ–±—Ä–∞—Ç–Ω–æ –≤ QIcon"""
        if blob_data:
            pixmap = QPixmap()
            pixmap.loadFromData(blob_data)
            return QIcon(pixmap)
        return QIcon()

    def add_history(self, url, title, icon=None):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            icon_blob = self.icon_to_blob(icon) if icon else None

            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
                cursor.execute(
                    "INSERT INTO history (url, title, icon, visit_time) VALUES (?, ?, ?, datetime('now', 'localtime'))",
                    (url, title, icon_blob),
                )
            except sqlite3.OperationalError as e:
                if "no such column: visit_time" in str(e):
                    # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ visit_time –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                    cursor.execute(
                        "INSERT INTO history (url, title, icon) VALUES (?, ?, ?)",
                        (url, title, icon_blob),
                    )
                else:
                    raise e

            conn.commit()

    def update_history_icon(self, url, icon):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º URL –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            icon_blob = self.icon_to_blob(icon) if icon else None
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–∏–º URL
                cursor.execute(
                    "UPDATE history SET icon = ? WHERE url = ? AND id = (SELECT id FROM history WHERE url = ? ORDER BY visit_time DESC LIMIT 1)",
                    (icon_blob, url, url),
                )
                conn.commit()
            except sqlite3.OperationalError:
                # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ä–∞—è, –æ–±–Ω–æ–≤–ª—è–µ–º –±–µ–∑ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
                cursor.execute(
                    "UPDATE history SET icon = ? WHERE url = ? AND id = (SELECT MAX(id) FROM history WHERE url = ?)",
                    (icon_blob, url, url),
                )
                conn.commit()

    def get_history(self, limit=100):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            try:
                cursor.execute(
                    "SELECT url, title, icon, visit_time FROM history ORDER BY visit_time DESC LIMIT ?",
                    (limit,),
                )
                return cursor.fetchall()
            except sqlite3.OperationalError as e:
                if "no such column: visit_time" in str(e):
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ visit_time, –∏—Å–ø–æ–ª—å–∑—É–µ–º id —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
                    print(
                        "–ö–æ–ª–æ–Ω–∫–∞ visit_time –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å..."
                    )
                    try:
                        cursor.execute(
                            "SELECT url, title, icon, datetime('now', 'localtime') as visit_time FROM history ORDER BY id DESC LIMIT ?",
                            (limit,),
                        )
                        return cursor.fetchall()
                    except sqlite3.OperationalError:
                        # –ï—Å–ª–∏ –∏ icon –Ω–µ—Ç, —Ç–æ –æ–±—Ö–æ–¥–∏–º—Å—è –±–µ–∑ –Ω–µ—ë
                        cursor.execute(
                            "SELECT url, title, NULL as icon, datetime('now', 'localtime') as visit_time FROM history ORDER BY id DESC LIMIT ?",
                            (limit,),
                        )
                        return cursor.fetchall()
                elif "no such column: icon" in str(e):
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ icon, –Ω–æ –µ—Å—Ç—å visit_time
                    logger.warning(
                        "üö© –ö–æ–ª–æ–Ω–∫–∞ icon –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å..."
                    )
                    cursor.execute(
                        "SELECT url, title, NULL as icon, visit_time FROM history ORDER BY visit_time DESC LIMIT ?",
                        (limit,),
                    )
                    return cursor.fetchall()
                else:
                    raise e

    def add_bookmark(self, url, title, icon=None, is_favorite=False):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            icon_blob = self.icon_to_blob(icon) if icon else None
            cursor.execute(
                "INSERT INTO bookmarks (url, title, icon, is_favorite) VALUES (?, ?, ?, ?)",
                (url, title, icon_blob, is_favorite),
            )
            conn.commit()

    def get_bookmarks(self):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            try:
                cursor.execute(
                    "SELECT url, title, icon, is_favorite, added_time FROM bookmarks ORDER BY added_time DESC"
                )
                return cursor.fetchall()
            except sqlite3.OperationalError as e:
                if "no such column" in str(e):
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏ –±–µ–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
                    logger.warning("üö© –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–∫–ª–∞–¥–æ–∫...")
                    cursor.execute(
                        "SELECT url, title, NULL as icon, 0 as is_favorite, 'Unknown' as added_time FROM bookmarks ORDER BY id DESC"
                    )
                    return cursor.fetchall()
                else:
                    raise e

    def get_favorites(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–æ–∫"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            try:
                cursor.execute(
                    "SELECT url, title, icon FROM bookmarks WHERE is_favorite = 1 ORDER BY added_time DESC"
                )
                return cursor.fetchall()
            except sqlite3.OperationalError:
                return []

    def toggle_favorite(self, url):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            try:
                cursor.execute(
                    "UPDATE bookmarks SET is_favorite = NOT is_favorite WHERE url = ?",
                    (url,),
                )
                conn.commit()
                return True
            except sqlite3.OperationalError:
                return False

    def remove_bookmark(self, url):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM bookmarks WHERE url = ?", (url,))
            conn.commit()

    def save_setting(self, key, value):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)",
                (key, value),
            )
            conn.commit()

    def get_setting(self, key, default=None):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT value FROM settings WHERE key = ?", (key,))
            result = cursor.fetchone()
            return result[0] if result else default

    def clear_history(self):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM history")
            conn.commit()

    def add_download(self, url, file_path, status="downloading"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO downloads (url, file_path, status) VALUES (?, ?, ?)",
                (url, file_path, status),
            )
            conn.commit()

    def get_downloads(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∑–æ–∫"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            try:
                cursor.execute(
                    "SELECT url, file_path, start_time, status FROM downloads ORDER BY start_time DESC"
                )
                return cursor.fetchall()
            except sqlite3.OperationalError as e:
                if "no such column" in str(e):
                    logger.warning("üö© –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫...")
                    cursor.execute(
                        "SELECT url, file_path, 'Unknown' as start_time, 'completed' as status FROM downloads ORDER BY id DESC"
                    )
                    return cursor.fetchall()
                else:
                    raise e

    def update_download_status(self, url, file_path, status):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE downloads SET status = ? WHERE url = ? AND file_path = ?",
                (status, url, file_path),
            )
            conn.commit()

    def clear_all_data(self):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM history")
            cursor.execute("DELETE FROM bookmarks")
            cursor.execute("DELETE FROM downloads")
            conn.commit()

    def recreate_database(self):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω—É–ª—è"""
        try:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if os.path.exists(self.db_path):
                os.remove(self.db_path)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.init_database()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    def repair_database(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
                cursor.execute("PRAGMA integrity_check")
                result = cursor.fetchone()

                if result[0] != "ok":
                    logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                    self.recreate_database()
                    return False

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                self.migrate_database(cursor)
                conn.commit()

                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                return True

        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.recreate_database()
            return False


class BrowserTab(QWidget):
    urlChanged = pyqtSignal(str)
    titleChanged = pyqtSignal(str)
    loadProgress = pyqtSignal(int)
    iconChanged = pyqtSignal(QIcon)
    zoomChanged = pyqtSignal(float)

    def __init__(self, url="https://www.google.com", profile=None):
        super().__init__()
        self.layout = QVBoxLayout(self)
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.web_view = QWebEngineView()
        logger.info(f"‚úÖBrowserTab initialized with URL: {url}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        if profile:
            try:
                page = QWebEnginePage(profile, self)
                logger.info("‚úÖ QWebEnginePage —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                self.web_view.setPage(page)
            except Exception as e:
                logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏: {e}")

        self.layout.addWidget(self.web_view)

        self.web_view.urlChanged.connect(self.handle_url_changed)
        self.web_view.titleChanged.connect(self.handle_title_changed)
        self.web_view.loadProgress.connect(
            lambda progress: self.loadProgress.emit(progress)
        )
        self.web_view.iconChanged.connect(self.handle_icon_changed)

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞
        self.current_zoom = 1.0
        self.web_view.page().zoomFactorChanged.connect(self.on_zoom_changed)

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.web_view.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.web_view.customContextMenuRequested.connect(self.show_context_menu)

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –º—ã—à–∏ –Ω–∞ —Å—Å—ã–ª–∫–∏
        self.web_view.page().linkHovered.connect(self.on_link_hovered)

        # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.web_view.wheelEvent = self.handle_wheel_event

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ url —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
        if isinstance(url, str) and url:
            self.web_view.load(QUrl(url))
        else:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Google –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.web_view.load(QUrl("https://www.google.com"))

    def is_alive(self, obj):
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            bool(obj)
        except RuntimeError:
            return False
        return True

    def handle_url_changed(self, url):
        if self.is_alive(self):
            self.urlChanged.emit(url.toString())

    def handle_title_changed(self, title):
        if self.is_alive(self):
            self.titleChanged.emit(title)

    def handle_icon_changed(self, icon):
        if self.is_alive(self):
            self.iconChanged.emit(icon)

    def navigate_to_url(self, url):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ url —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
        if not isinstance(url, str):
            logger.error(f"üÜò –û—à–∏–±–∫–∞: URL –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π: {url}")
            return

        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        url = url.strip()

        if not url:
            url = "https://www.google.com"
        elif not url.startswith(("http://", "https://")):
            if url.startswith("www.") or "." in url:
                url = "https://" + url
            else:
                url = f"https://www.google.com/search?q={url}"

        try:
            self.web_view.load(QUrl(url))
        except Exception as e:
            # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ URL {url}: {e}")
            logger.error(f"üÜò Error loading URL {url}: {e}")
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Google –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            self.web_view.load(QUrl("https://www.google.com"))

    def get_current_url(self):
        try:
            return self.web_view.url().toString()
        except Exception as e:
            # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ URL: {e}")
            return ""

    def get_current_title(self):
        try:
            return self.web_view.title()
        except:
            return "–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞"

    def get_current_icon(self):
        try:
            return self.web_view.icon()
        except:
            return QIcon()

    def reload(self):
        self.web_view.reload()

    def back(self):
        self.web_view.back()

    def forward(self):
        self.web_view.forward()

    def stop(self):
        self.web_view.stop()

    def on_zoom_changed(self, zoom_factor):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞"""
        self.current_zoom = zoom_factor
        self.zoomChanged.emit(zoom_factor)

    def get_current_zoom(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–±"""
        return self.current_zoom

    def zoom_in(self):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞—Å—à—Ç–∞–±"""
        new_zoom = min(self.current_zoom * 1.1, 3.0)
        self.web_view.setZoomFactor(new_zoom)

    def zoom_out(self):
        """–£–º–µ–Ω—å—à–∞–µ—Ç –º–∞—Å—à—Ç–∞–±"""
        new_zoom = max(self.current_zoom / 1.1, 0.25)
        self.web_view.setZoomFactor(new_zoom)

    def reset_zoom(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º–∞—Å—à—Ç–∞–± –∫ 100%"""
        self.web_view.setZoomFactor(1.0)

    def show_context_menu(self, position):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        menu = QMenu(self)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±—Ä–∞—É–∑–µ—Ä
        parent_browser = None
        widget = self.parent()
        while widget:
            if hasattr(widget, "new_tab"):
                parent_browser = widget
                break
            widget = widget.parent()

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        back_action = QAction(QIcon(os.path.join("images", "back.png")), "–ù–∞–∑–∞–¥", self)
        back_action.triggered.connect(self.back)
        back_action.setEnabled(self.web_view.page().history().canGoBack())
        menu.addAction(back_action)

        forward_action = QAction(
            QIcon(os.path.join("images", "forward.png")), "–í–ø–µ—Ä–µ–¥", self
        )
        forward_action.triggered.connect(self.forward)
        forward_action.setEnabled(self.web_view.page().history().canGoForward())
        menu.addAction(forward_action)

        reload_action = QAction(
            QIcon(os.path.join("images", "refresh.png")), "–û–±–Ω–æ–≤–∏—Ç—å", self
        )
        reload_action.triggered.connect(self.reload)
        menu.addAction(reload_action)

        menu.addSeparator()

        # –†–∞–±–æ—Ç–∞ —Å –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞
        copy_link_action = QAction(
            QIcon(os.path.join("images", "copyurl.png")), "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π URL", self
        )
        copy_link_action.triggered.connect(self.copy_current_url)
        menu.addAction(copy_link_action)

        copy_web_link_action = QAction(
            QIcon(os.path.join("images", "copylink.png")), "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", self
        )
        copy_web_link_action.triggered.connect(self.copy_web_link)
        menu.addAction(copy_web_link_action)

        paste_url_action = QAction(
            QIcon(os.path.join("images", "paste.png")), "–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", self
        )
        paste_url_action.triggered.connect(self.paste_url)
        menu.addAction(paste_url_action)

        copy_text_action = QAction(
            QIcon(os.path.join("images", "copytext.png")), "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç", self
        )
        copy_text_action.triggered.connect(self.copy_selected_text)
        copy_text_action.setEnabled(True)  # –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ
        menu.addAction(copy_text_action)

        menu.addSeparator()

        # –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞
        if parent_browser:
            new_tab_action = QAction(
                QIcon(os.path.join("images", "opennew.png")),
                "–û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ",
                self,
            )
            new_tab_action.triggered.connect(
                lambda: parent_browser.new_tab(self.get_copy_url())
            )
            menu.addAction(new_tab_action)

        menu.addSeparator()

        # –ó–∞–≥—Ä—É–∑–∫–∏
        download_submenu = QMenu("üîΩ –ó–∞–≥—Ä—É–∑–∏—Ç—å", self)

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ MHTML
        save_page_action = QAction(
            QIcon(os.path.join("images", "mhtml.png")),
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É (MHTML)",
            self,
        )
        save_page_action.triggered.connect(self.save_page_as_mhtml)
        download_submenu.addAction(save_page_action)

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ HTML
        save_html_action = QAction(
            QIcon(os.path.join("images", "html.png")), "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ HTML", self
        )
        save_html_action.triggered.connect(self.save_page_as_html)
        download_submenu.addAction(save_html_action)

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF
        save_pdf_action = QAction(
            QIcon(os.path.join("images", "pdf.png")), "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF", self
        )
        save_pdf_action.triggered.connect(self.save_page_as_pdf)
        download_submenu.addAction(save_pdf_action)

        download_submenu.addSeparator()

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        download_image_action = QAction(
            QIcon(os.path.join("images", "image.png")), "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", self
        )
        download_image_action.triggered.connect(self.download_image)
        download_submenu.addAction(download_image_action)

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        download_image_alt_action = QAction(
            QIcon(os.path.join("images", "images.png")),
            "–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
            self,
        )
        download_image_alt_action.triggered.connect(self.download_image_alternative)
        download_submenu.addAction(download_image_alt_action)

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞
        download_media_action = QAction(
            QIcon(os.path.join("images", "media.png")), "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞", self
        )
        download_media_action.triggered.connect(self.download_media)
        download_submenu.addAction(download_media_action)

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Å—ã–ª–∫—É
        download_link_action = QAction(
            QIcon(os.path.join("images", "link.png")), "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ", self
        )
        download_link_action.triggered.connect(self.download_link)
        download_submenu.addAction(download_link_action)

        menu.addMenu(download_submenu)

        copy_image_action = QAction(
            QIcon(os.path.join("images", "imagcopy.png")),
            "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            self,
        )
        copy_image_action.triggered.connect(self.copy_image)
        menu.addAction(copy_image_action)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤
        info_action = QAction(
            QIcon(os.path.join("images", "info.png")), "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤", self
        )
        info_action.triggered.connect(self.show_image_format_info)
        menu.addAction(info_action)

        menu.addSeparator()

        # –ú–∞—Å—à—Ç–∞–±
        zoom_in_action = QAction(
            QIcon(os.path.join("images", "zoomin.png")), "–£–≤–µ–ª–∏—á–∏—Ç—å", self
        )
        zoom_in_action.triggered.connect(self.zoom_in)
        menu.addAction(zoom_in_action)

        zoom_out_action = QAction(
            QIcon(os.path.join("images", "zoomout.png")), "–£–º–µ–Ω—å—à–∏—Ç—å", self
        )
        zoom_out_action.triggered.connect(self.zoom_out)
        menu.addAction(zoom_out_action)

        reset_zoom_action = QAction(
            QIcon(os.path.join("images", "zoomreset.png")), "–°–±—Ä–æ—Å–∏—Ç—å –º–∞—Å—à—Ç–∞–±", self
        )
        reset_zoom_action.triggered.connect(self.reset_zoom)
        menu.addAction(reset_zoom_action)

        menu.exec(self.web_view.mapToGlobal(position))

    def copy_current_url(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π URL –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        clipboard = QApplication.clipboard()
        clipboard.setText(self.get_current_url())

    def copy_web_link(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤–µ–±-—Å—Å—ã–ª–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        self.web_view.page().triggerAction(QWebEnginePage.WebAction.CopyLinkToClipboard)

    def get_copy_url(self):
        self.web_view.page().triggerAction(QWebEnginePage.WebAction.CopyLinkToClipboard)
        clipboard = QApplication.clipboard()
        url = clipboard.text().strip()
        return url

    def paste_url(self):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç URL –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ –Ω–µ–º—É"""
        clipboard = QApplication.clipboard()
        url = clipboard.text().strip()
        if url:
            self.navigate_to_url(url)

    def copy_selected_text(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        self.web_view.page().triggerAction(QWebEnginePage.WebAction.Copy)

    def save_page_as_mhtml(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ MHTML (–≤–µ–±-–∞—Ä—Ö–∏–≤)"""
        self.web_view.page().triggerAction(QWebEnginePage.WebAction.SavePage)

    def save_page_as_html(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ HTML —Ñ–∞–π–ª"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            title = self.get_current_title()
            if not title or title == "–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞":
                title = "webpage"

            # –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            import re

            safe_title = re.sub(r'[<>:"/\\|?*]', "", title)

            # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ HTML",
                f"{safe_title}.html",
                "HTML —Ñ–∞–π–ª—ã (*.html);;–í—Å–µ —Ñ–∞–π–ª—ã (*.*)",
            )

            if file_path:
                # –ü–æ–ª—É—á–∞–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                self.web_view.page().toHtml(
                    lambda html: self.save_html_content(html, file_path)
                )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ HTML: {e}")

    def save_html_content(self, html_content, file_path):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(html_content)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            parent_browser = self.get_parent_browser()
            if parent_browser:
                parent_browser.update_status_bar(
                    f"‚úÖ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(file_path)}"
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑–æ–∫
                if hasattr(parent_browser, "download_manager"):
                    parent_browser.download_manager.add_download(
                        self.get_current_url(), file_path, os.path.getsize(file_path)
                    )
                    parent_browser.download_manager.download_completed(
                        self.get_current_url(), file_path, True
                    )

        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ HTML —Ñ–∞–π–ª–∞: {e}")

    def save_page_as_pdf(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ PDF"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            title = self.get_current_title()
            if not title or title == "–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞":
                title = "webpage"

            # –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            import re

            safe_title = re.sub(r'[<>:"/\\|?*]', "", title)

            # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF",
                f"{safe_title}.pdf",
                "PDF —Ñ–∞–π–ª—ã (*.pdf);;–í—Å–µ —Ñ–∞–π–ª—ã (*.*)",
            )

            if file_path:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä –¥–ª—è PDF
                printer = QPrinter(QPrinter.PrinterMode.HighResolution)
                printer.setOutputFormat(QPrinter.OutputFormat.PdfFormat)
                printer.setOutputFileName(file_path)

                # –ü–µ—á–∞—Ç–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ PDF
                self.web_view.page().print(
                    printer, lambda success: self.pdf_print_finished(success, file_path)
                )

        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PDF: {e}")
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
            self.web_view.page().printToPdf(file_path)

    def pdf_print_finished(self, success, file_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—á–∞—Ç–∏ –≤ PDF"""
        parent_browser = self.get_parent_browser()
        if parent_browser:
            if success:
                parent_browser.update_status_bar(
                    f"‚úÖ PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(file_path)}"
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑–æ–∫
                if hasattr(parent_browser, "download_manager"):
                    parent_browser.download_manager.add_download(
                        self.get_current_url(),
                        file_path,
                        os.path.getsize(file_path) if os.path.exists(file_path) else 0,
                    )
                    parent_browser.download_manager.download_completed(
                        self.get_current_url(), file_path, True
                    )
            else:
                parent_browser.update_status_bar("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PDF")

    def download_image(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.web_view.page().triggerAction(
                QWebEnginePage.WebAction.DownloadImageToDisk
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            parent_browser = self.get_parent_browser()
            if parent_browser:
                parent_browser.update_status_bar("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—á–∞—Ç–∞...")
        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏
            self.download_image_alternative()

    def download_media(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º"""
        self.web_view.page().triggerAction(QWebEnginePage.WebAction.DownloadMediaToDisk)

    def download_link(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º"""
        self.web_view.page().triggerAction(QWebEnginePage.WebAction.DownloadLinkToDisk)

    def copy_image(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º"""
        self.web_view.page().triggerAction(
            QWebEnginePage.WebAction.CopyImageToClipboard
        )

    def download_image_alternative(self):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            self.web_view.page().toHtml(self.find_and_download_images)
        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

    def find_and_download_images(self, html_content):
        """–ò—â–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å"""
        try:
            # –ò—â–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML
            img_patterns = [
                r'<img[^>]*src=["\']([^"\']*)["\']',
                r'background-image:\s*url\(["\']?([^"\')\s]+)["\']?\)',
                r'data-src=["\']([^"\']*)["\']',
                r'srcset=["\']([^"\']*)["\']',
            ]

            found_images = []
            for pattern in img_patterns:
                matches = re.findall(pattern, html_content, re.IGNORECASE)
                for match in matches:
                    if match and not match.startswith("data:"):
                        found_images.append(match)

            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            found_images = list(set(found_images))

            if found_images:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_url, ok = QInputDialog.getItem(
                    self,
                    "–í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:",
                    found_images,
                    0,
                    False,
                )

                if ok and image_url:
                    self.download_image_by_url(image_url)
            else:
                parent_browser = self.get_parent_browser()
                if parent_browser:
                    parent_browser.update_status_bar(
                        "‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
                    )

        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")

    def download_image_by_url(self, image_url):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            base_url = self.get_current_url()

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
            if not image_url.startswith(("http://", "https://")):
                image_url = urljoin(base_url, image_url)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            parsed_url = urlparse(image_url)
            filename = os.path.basename(parsed_url.path)

            # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
            if not filename or "." not in filename:
                filename = f"image_{hash(image_url) % 10000}.webp"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.splitext(filename)[1]:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º .webp –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ
                filename += ".webp"

            # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                filename,
                "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.webp *.png *.jpg *.jpeg *.gif *.bmp *.svg *.ico *.tiff);;WebP (*.webp);;PNG (*.png);;JPEG (*.jpg *.jpeg);;GIF (*.gif);;–í—Å–µ —Ñ–∞–π–ª—ã (*.*)",
            )

            if file_path:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                parent_browser = self.get_parent_browser()
                if parent_browser:
                    parent_browser.update_status_bar(
                        f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {filename}"
                    )

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                response = requests.get(image_url, stream=True, timeout=10)
                response.raise_for_status()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(file_path, "wb") as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        f.write(chunk)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                if parent_browser:
                    parent_browser.update_status_bar(
                        f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(file_path)}"
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑–æ–∫
                    if hasattr(parent_browser, "download_manager"):
                        parent_browser.download_manager.add_download(
                            image_url, file_path, os.path.getsize(file_path)
                        )
                        parent_browser.download_manager.download_completed(
                            image_url, file_path, True
                        )

        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {e}")
            parent_browser = self.get_parent_browser()
            if parent_browser:
                parent_browser.update_status_bar(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
                )

            QMessageBox.warning(
                self, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n{str(e)}"
            )

    def get_parent_browser(self):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±—Ä–∞—É–∑–µ—Ä"""
        widget = self.parent()
        while widget:
            if hasattr(widget, "update_status_bar"):
                return widget
            widget = widget.parent()
        return None

    def show_image_format_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Information)
        msg.setWindowTitle("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        msg.setText("–ë—Ä–∞—É–∑–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:")

        formats_info = """
<b>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ WebP - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏ –º–∞–ª–æ–º —Ä–∞–∑–º–µ—Ä–µ
‚Ä¢ AVIF - –Ω–æ–≤–µ–π—à–∏–π —Ñ–æ—Ä–º–∞—Ç —Å –ª—É—á—à–∏–º —Å–∂–∞—Ç–∏–µ–º
‚Ä¢ SVG - –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞

<b>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ JPEG/JPG - –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚Ä¢ PNG - –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
‚Ä¢ GIF - –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
‚Ä¢ BMP - –±–µ–∑ —Å–∂–∞—Ç–∏—è
‚Ä¢ TIFF - –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—á–∞—Ç–∏
‚Ä¢ ICO - –¥–ª—è –∏–∫–æ–Ω–æ–∫

<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ WebP:</b>
‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–∞ 25-35% –º–µ–Ω—å—à–µ JPEG
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
‚Ä¢ –•–æ—Ä–æ—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–∞—Ö
        """

        msg.setInformativeText(formats_info)
        msg.exec()

    def on_link_hovered(self, url):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –º—ã—à–∏ –Ω–∞ —Å—Å—ã–ª–∫—É"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±—Ä–∞—É–∑–µ—Ä
        parent_browser = None
        widget = self.parent()
        while widget:
            if hasattr(widget, "update_status_bar"):
                parent_browser = widget
                break
            widget = widget.parent()

        if parent_browser:
            if url:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º URL –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
                parent_browser.update_status_bar(f"üîó {url}")
            else:
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä, –µ—Å–ª–∏ –º—ã—à—å –Ω–µ –Ω–∞ —Å—Å—ã–ª–∫–µ
                parent_browser.status_bar.clearMessage()

    def handle_wheel_event(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (Ctrl + –∫–æ–ª–µ—Å–∏–∫–æ)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∂–∞—Ç –ª–∏ Ctrl
        if event.modifiers() & Qt.KeyboardModifier.ControlModifier:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            delta = event.angleDelta().y()

            if delta > 0:
                # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±
                self.zoom_in()
            elif delta < 0:
                # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ - —É–º–µ–Ω—å—à–∞–µ–º –º–∞—Å—à—Ç–∞–±
                self.zoom_out()

            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
            event.accept()
        else:
            # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ - –≤—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            QWebEngineView.wheelEvent(self.web_view, event)

    def __del__(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if hasattr(self, "web_view") and self.web_view:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                self.web_view.stop()
                # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page = self.web_view.page()
                if page:
                    page.setParent(None)
                    page.deleteLater()
                # –û—á–∏—â–∞–µ–º –≤–µ–±-–≤—å—é
                self.web_view.setParent(None)
            logger.info("üóëÔ∏è BrowserTab destructor: —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –≤ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ BrowserTab: {e}")

    def cleanup_resources(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if hasattr(self, "web_view") and self.web_view:
                # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
                try:
                    self.web_view.disconnect()
                except:
                    pass

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                self.web_view.stop()

                # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page = self.web_view.page()
                if page:
                    try:
                        page.disconnect()
                    except:
                        pass
                    page.setParent(None)
                    page.deleteLater()

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None
                self.web_view.setPage(None)
                self.web_view.setParent(None)
                self.web_view = None

            logger.info("‚úÖ BrowserTab —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ BrowserTab: {e}")


class FavoritesBar(QWidget):
    """–ü–∞–Ω–µ–ª—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""

    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db_manager = db_manager
        self.parent_browser = parent
        self.init_ui()
        logger.info("‚úÖ –ü–∞–Ω–µ–ª—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (FavoritesBar) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def init_ui(self):
        self.setMaximumHeight(35)
        self.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
                padding: 5px 10px;
                text-align: left;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #e0e0e0;
            }
            QPushButton:pressed {
                background-color: #d0d0d0;
            }
        """)

        # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_layout = QHBoxLayout(self)
        main_layout.setContentsMargins(5, 2, 5, 2)

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)

        # –í–∏–¥–∂–µ—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        self.favorites_widget = QWidget()
        self.favorites_layout = QHBoxLayout(self.favorites_widget)
        self.favorites_layout.setContentsMargins(0, 0, 0, 0)
        self.favorites_layout.setSpacing(2)
        self.favorites_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)

        scroll_area.setWidget(self.favorites_widget)
        main_layout.addWidget(scroll_area)

        # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º
        self.manage_button = QPushButton("")
        self.manage_button.setIcon(QIcon(os.path.join("images", "histors.png")))
        self.manage_button.setMaximumWidth(30)
        self.manage_button.setToolTip("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º")
        self.manage_button.clicked.connect(self.manage_favorites)
        main_layout.addWidget(self.manage_button)

        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç
        self.favorites_layout.addStretch()

        # –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        self.refresh_favorites()

    def refresh_favorites(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–Ω–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç)
        self.clear_favorite_buttons()

        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        favorites = self.db_manager.get_favorites()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        for url, title, icon_blob in favorites:
            self.add_favorite_button(url, title, icon_blob)

    def clear_favorite_buttons(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ, —Å–æ—Ö—Ä–∞–Ω—è—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç"""
        items_to_remove = []

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã (–∫–Ω–æ–ø–∫–∏) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        for i in range(self.favorites_layout.count()):
            item = self.favorites_layout.itemAt(i)
            if item and item.widget():
                items_to_remove.append(item.widget())

        # –£–¥–∞–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
        for widget in items_to_remove:
            widget.setParent(None)
            widget.deleteLater()

    def clear_favorites_layout(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç layout –ø–∞–Ω–µ–ª–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        while self.favorites_layout.count():
            item = self.favorites_layout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()
            elif item.spacerItem():
                del item

    def open_favorite(self, url):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—É—é –∑–∞–∫–ª–∞–¥–∫—É"""
        if self.parent_browser and isinstance(url, str):
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ
            current_tab = self.parent_browser.tab_widget.currentWidget()
            if current_tab:
                current_tab.navigate_to_url(url)
            else:
                self.parent_browser.new_tab(url)

    def show_context_menu(self, position, url, button):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        menu = QMenu(self)

        open_action = QAction(
            QIcon(os.path.join("images", "tabs.png")), "–û—Ç–∫—Ä—ã—Ç—å", self
        )
        open_action.triggered.connect(lambda: self.open_favorite(url))
        menu.addAction(open_action)

        open_new_tab_action = QAction(
            QIcon(os.path.join("images", "ntabs.png")), "–û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ", self
        )
        open_new_tab_action.triggered.connect(
            lambda: self.parent_browser.new_tab(url) if isinstance(url, str) else None
        )
        menu.addAction(open_new_tab_action)

        remove_action = QAction(
            QIcon(os.path.join("images", "delete.png")), "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", self
        )
        remove_action.triggered.connect(lambda: self.remove_from_favorites(url))
        menu.addAction(remove_action)

        menu.exec(button.mapToGlobal(position))

    def remove_from_favorites(self, url):
        """–£–¥–∞–ª—è–µ—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        self.db_manager.toggle_favorite(url)
        self.refresh_favorites()

    def add_favorite_button(self, url, title, icon_blob):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –ø–∞–Ω–µ–ª—å"""
        icon = self.db_manager.blob_to_icon(icon_blob) if icon_blob else QIcon()

        button = QPushButton()
        button.setIcon(icon)
        button.setText(title[:20] + "..." if len(title) > 20 else title)
        button.setToolTip(f"{title}\n{url}")
        button.setMaximumWidth(150)
        button.clicked.connect(lambda checked, u=url: self.open_favorite(u))

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        button.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        button.customContextMenuRequested.connect(
            lambda pos, u=url, b=button: self.show_context_menu(pos, u, b)
        )

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–µ—Ä–µ–¥ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–º—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–º)
        insert_index = 0

        # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ–¥ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–º—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–º
        for i in range(self.favorites_layout.count()):
            item = self.favorites_layout.itemAt(i)
            if item and item.spacerItem():
                insert_index = i
                break
            else:
                insert_index = i + 1

        self.favorites_layout.insertWidget(insert_index, button)
        return button

    def manage_favorites(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º"""
        if self.parent_browser:
            self.parent_browser.show_bookmarks()


class DownloadItem(QWidget):
    def __init__(self, url, file_path, file_size=0):
        super().__init__()
        self.url = url
        self.file_path = file_path
        self.file_size = file_size
        self.start_time = datetime.now()
        self.bytes_downloaded = 0

        self.init_ui()
        logger.info(f"DownloadItem initialized with URL: {url}, File Path: {file_path}")

    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 5, 10, 5)

        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞: –∏–º—è —Ñ–∞–π–ª–∞ –∏ –∫–Ω–æ–ø–∫–∏
        top_layout = QHBoxLayout()

        # –ò–∫–æ–Ω–∫–∞ —Ñ–∞–π–ª–∞
        self.icon_label = QLabel()
        self.icon_label.setFixedSize(32, 32)
        self.set_file_icon()
        top_layout.addWidget(self.icon_label)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        info_layout = QVBoxLayout()

        self.filename_label = QLabel(os.path.basename(self.file_path))
        self.filename_label.setStyleSheet("font-weight: bold; font-size: 12px;")
        info_layout.addWidget(self.filename_label)

        self.url_label = QLabel(self.url)
        self.url_label.setStyleSheet("color: #666; font-size: 10px;")
        self.url_label.setWordWrap(True)
        info_layout.addWidget(self.url_label)

        top_layout.addLayout(info_layout)
        top_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.open_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å")
        self.open_button.setMaximumWidth(80)
        self.open_button.clicked.connect(self.open_file)
        self.open_button.setEnabled(False)  # –í–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        top_layout.addWidget(self.open_button)

        self.folder_button = QPushButton("–ü–∞–ø–∫–∞")
        self.folder_button.setMaximumWidth(80)
        self.folder_button.clicked.connect(self.open_folder)
        top_layout.addWidget(self.folder_button)

        layout.addLayout(top_layout)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setMaximum(100)
        self.progress_bar.setTextVisible(True)
        layout.addWidget(self.progress_bar)

        # –ù–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞: —Å—Ç–∞—Ç—É—Å –∏ —Ä–∞–∑–º–µ—Ä
        bottom_layout = QHBoxLayout()

        self.status_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        self.status_label.setStyleSheet("color: #333; font-size: 11px;")
        bottom_layout.addWidget(self.status_label)

        bottom_layout.addStretch()

        self.size_label = QLabel(self.format_size(self.file_size))
        self.size_label.setStyleSheet("color: #666; font-size: 11px;")
        bottom_layout.addWidget(self.size_label)

        layout.addLayout(bottom_layout)

    def set_file_icon(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
        filename = os.path.basename(self.file_path).lower()

        if filename.endswith(
            (
                ".jpg",
                ".jpeg",
                ".png",
                ".gif",
                ".bmp",
                ".webp",
                ".svg",
                ".ico",
                ".tiff",
                ".tif",
            )
        ):
            icon_text = "üñºÔ∏è"
        elif filename.endswith(
            (".mp4", ".avi", ".mkv", ".mov", ".webm", ".flv", ".wmv", ".m4v")
        ):
            icon_text = "üé¨"
        elif filename.endswith(
            (".mp3", ".wav", ".flac", ".aac", ".ogg", ".wma", ".m4a")
        ):
            icon_text = "üéµ"
        elif filename.endswith((".pdf")):
            icon_text = "üìÑ"
        elif filename.endswith((".zip", ".rar", ".7z", ".tar", ".gz", ".bz2", ".xz")):
            icon_text = "üì¶"
        elif filename.endswith((".exe", ".msi", ".deb", ".rpm", ".dmg")):
            icon_text = "‚öôÔ∏è"
        elif filename.endswith((".txt", ".log", ".md", ".readme")):
            icon_text = "üìù"
        elif filename.endswith((".doc", ".docx", ".odt")):
            icon_text = "üìÑ"
        elif filename.endswith((".xls", ".xlsx", ".ods")):
            icon_text = "üìä"
        elif filename.endswith((".ppt", ".pptx", ".odp")):
            icon_text = "üìà"
        elif filename.endswith((".html", ".htm", ".xml")):
            icon_text = "üåê"
        elif filename.endswith(
            (".css", ".js", ".json", ".py", ".cpp", ".java", ".php")
        ):
            icon_text = "üíª"
        else:
            icon_text = "üìÅ"

        self.icon_label.setText(icon_text)
        self.icon_label.setStyleSheet("font-size: 24px;")

    def update_progress(self, bytes_received, bytes_total):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.bytes_downloaded = bytes_received

        if bytes_total > 0:
            progress = int((bytes_received / bytes_total) * 100)
            self.progress_bar.setValue(progress)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
            size_text = (
                f"{self.format_size(bytes_received)} / {self.format_size(bytes_total)}"
            )
            self.size_label.setText(size_text)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
            elapsed_time = (datetime.now() - self.start_time).total_seconds()
            if elapsed_time > 0:
                speed = bytes_received / elapsed_time
                speed_text = f"{self.format_size(speed)}/—Å"

                # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                if speed > 0 and bytes_total > bytes_received:
                    remaining_time = (bytes_total - bytes_received) / speed
                    time_text = self.format_time(remaining_time)
                    status_text = f"{speed_text} ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {time_text}"
                else:
                    status_text = speed_text

                self.status_label.setText(status_text)

    def download_completed(self, success=True):
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é"""
        if success:
            self.progress_bar.setValue(100)
            self.status_label.setText("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            self.status_label.setStyleSheet("color: green; font-size: 11px;")
            self.open_button.setEnabled(True)
        else:
            self.status_label.setText("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
            self.status_label.setStyleSheet("color: red; font-size: 11px;")

    def open_file(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        if os.path.exists(self.file_path):
            try:
                import subprocess
                import platform

                system = platform.system()
                if system == "Windows":
                    os.startfile(self.file_path)
                elif system == "Darwin":  # macOS
                    subprocess.run(["open", self.file_path])
                else:  # Linux
                    subprocess.run(["xdg-open", self.file_path])
            except Exception as e:
                logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {e}")

    def open_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–æ–º"""
        try:
            import subprocess
            import platform

            system = platform.system()
            if system == "Windows":
                subprocess.run(["explorer", "/select,", self.file_path])
            elif system == "Darwin":  # macOS
                subprocess.run(["open", "-R", self.file_path])
            else:  # Linux
                subprocess.run(["xdg-open", os.path.dirname(self.file_path)])
        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏: {e}")

    @staticmethod
    def format_size(size_bytes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if size_bytes == 0:
            return "0 –ë"

        size_names = ["–ë", "–ö–ë", "–ú–ë", "–ì–ë", "–¢–ë"]
        i = 0
        while size_bytes >= 1024 and i < len(size_names) - 1:
            size_bytes /= 1024.0
            i += 1

        return f"{size_bytes:.1f} {size_names[i]}"

    @staticmethod
    def format_time(seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{int(seconds)}—Å"
        elif seconds < 3600:
            minutes = int(seconds // 60)
            seconds = int(seconds % 60)
            return f"{minutes}–º {seconds}—Å"
        else:
            hours = int(seconds // 3600)
            minutes = int((seconds % 3600) // 60)
            return f"{hours}—á {minutes}–º"


class DownloadManager(QDialog):
    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db_manager = db_manager
        self.parent_browser = parent
        self.download_items = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏

        self.init_ui()

        self.load_downloads()

    def init_ui(self):
        self.setWindowTitle("üì• –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑–æ–∫")
        self.setGeometry(300, 300, 700, 500)

        layout = QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QHBoxLayout()

        title_label = QLabel("üì• –ó–∞–≥—Ä—É–∑–∫–∏")
        title_label.setStyleSheet("font-size: 16px; font-weight: bold; margin: 10px;")
        header_layout.addWidget(title_label)

        header_layout.addStretch()

        # –ü—É—Ç—å –∑–∞–≥—Ä—É–∑–æ–∫
        path_label = QLabel(f"üìÅ –ü–∞–ø–∫–∞: {self.get_download_path()}")
        path_label.setStyleSheet("color: #666; margin: 10px;")
        header_layout.addWidget(path_label)

        layout.addLayout(header_layout)

        # –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∑–æ–∫ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)

        self.downloads_widget = QWidget()
        self.downloads_layout = QVBoxLayout(self.downloads_widget)
        self.downloads_layout.addStretch()  # –†–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω—Ü–µ

        scroll_area.setWidget(self.downloads_widget)
        layout.addWidget(scroll_area)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()

        refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_button.clicked.connect(self.refresh_downloads)
        button_layout.addWidget(refresh_button)

        open_folder_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫")
        open_folder_button.clicked.connect(self.open_download_folder)
        button_layout.addWidget(open_folder_button)

        clear_completed_button = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ")
        clear_completed_button.clicked.connect(self.clear_completed)
        button_layout.addWidget(clear_completed_button)

        clear_all_button = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ")
        clear_all_button.clicked.connect(self.clear_all)
        button_layout.addWidget(clear_all_button)

        button_layout.addStretch()

        close_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_button.clicked.connect(self.close)
        button_layout.addWidget(close_button)

        layout.addLayout(button_layout)
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def get_download_path(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if self.parent_browser:
            custom_path = self.parent_browser.db_manager.get_setting(
                "download_path", ""
            )
            if custom_path and os.path.exists(custom_path):
                return custom_path

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return QStandardPaths.writableLocation(
            QStandardPaths.StandardLocation.DownloadLocation
        )

    def add_download(self, url, file_path, file_size=0):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤ –º–µ–Ω–µ–¥–∂–µ—Ä"""
        download_item = DownloadItem(url, file_path, file_size)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (–ø–µ—Ä–µ–¥ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º)
        self.downloads_layout.insertWidget(0, download_item)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        download_key = f"{url}_{os.path.basename(file_path)}"
        self.download_items[download_key] = download_item

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            self.db_manager.add_download(url, file_path)
        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î: {e}")

        return download_item

    def update_download_progress(self, url, file_path, bytes_received, bytes_total):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
        download_key = f"{url}_{os.path.basename(file_path)}"
        if download_key in self.download_items:
            self.download_items[download_key].update_progress(
                bytes_received, bytes_total
            )

    def download_completed(self, url, file_path, success=True):
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é"""
        download_key = f"{url}_{os.path.basename(file_path)}"
        if download_key in self.download_items:
            self.download_items[download_key].download_completed(success)

    def load_downloads(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            downloads = self.db_manager.get_downloads()
            for url, file_path, start_time, status in downloads:
                if os.path.exists(file_path):
                    download_item = DownloadItem(url, file_path)
                    if status == "completed":
                        download_item.download_completed(True)

                    self.downloads_layout.insertWidget(0, download_item)

                    download_key = f"{url}_{os.path.basename(file_path)}"
                    self.download_items[download_key] = download_item
            logger.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫: {e}")

    def refresh_downloads(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∑–æ–∫"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
        self.clear_all_items()

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        self.load_downloads()

    def clear_completed(self):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        items_to_remove = []

        for i in range(
            self.downloads_layout.count() - 1
        ):  # -1 –∏–∑-–∑–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            item = self.downloads_layout.itemAt(i)
            if item and item.widget():
                download_item = item.widget()
                if isinstance(download_item, DownloadItem):
                    if "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" in download_item.status_label.text():
                        items_to_remove.append(download_item)

        for item in items_to_remove:
            item.setParent(None)
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            for key, value in list(self.download_items.items()):
                if value == item:
                    del self.download_items[key]

    def clear_all(self):
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∑–æ–∫"""
        reply = QMessageBox.question(
            self,
            "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ",
            "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞?\n\n–§–∞–π–ª—ã –Ω–∞ –¥–∏—Å–∫–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è.",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
        )

        if reply == QMessageBox.StandardButton.Yes:
            self.clear_all_items()
            self.download_items.clear()

    def clear_all_items(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∑–∞–≥—Ä—É–∑–æ–∫"""
        for i in reversed(
            range(self.downloads_layout.count() - 1)
        ):  # -1 –∏–∑-–∑–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            item = self.downloads_layout.itemAt(i)
            if item and item.widget():
                item.widget().setParent(None)

    def open_download_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫"""
        download_path = self.get_download_path()
        try:
            import subprocess
            import platform

            system = platform.system()
            if system == "Windows":
                subprocess.run(["explorer", download_path])
            elif system == "Darwin":  # macOS
                subprocess.run(["open", download_path])
            else:  # Linux
                subprocess.run(["xdg-open", download_path])
        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫: {e}")
            QMessageBox.warning(
                self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫:\n{e}"
            )


class HistoryManager(QDialog):
    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db_manager = db_manager
        self.parent_browser = parent
        self.setWindowTitle("–ò—Å—Ç–æ—Ä–∏—è")
        self.resize(400, 700)
        self.setStyleSheet("""
                    QListWidget::item {
                        color: blue;
                    }
                    QListWidget::item:hover {
                        color: #FF0000;
                        background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1,
                                                    stop: 0 #FAFBFE, stop: 1 lightblue);
                    }
                    QListWidget {
                        background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1,
                                                    stop: 0 lightblue, stop: 1 #FAFBFE);
                        border: 1px solid gray;
                        border-radius: 7px;
                        padding: 5px;
                    }
                    QListWidget::item:selected {
                        color: black;
                        background-color: #e3f2fd;
                    }
        """)

        layout = QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π")
        header_label.setStyleSheet("font-size: 14px; font-weight: bold; margin: 5px;")
        layout.addWidget(header_label)

        # –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        self.history_list = QListWidget()

        self.history_list.itemDoubleClicked.connect(self.open_history_item)
        layout.addWidget(self.history_list)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()

        refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_button.clicked.connect(self.refresh_history)
        button_layout.addWidget(refresh_button)

        open_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å")
        open_button.clicked.connect(self.open_history_item)
        button_layout.addWidget(open_button)

        open_new_tab_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ")
        open_new_tab_button.clicked.connect(self.open_in_new_tab)
        button_layout.addWidget(open_new_tab_button)

        copy_link_button = QPushButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É")
        copy_link_button.clicked.connect(self.copy_link)
        button_layout.addWidget(copy_link_button)

        button_layout.addStretch()

        clear_button = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        clear_button.clicked.connect(self.clear_history)
        button_layout.addWidget(clear_button)

        layout.addLayout(button_layout)
        logger.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        self.refresh_history()

    def refresh_history(self):
        self.history_list.clear()
        history = self.db_manager.get_history()

        for row in history:
            if len(row) >= 4:  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∏–∫–æ–Ω–∫–∞–º–∏
                url, title, icon_blob, visit_time = row
                icon = (
                    self.db_manager.blob_to_icon(icon_blob)
                    if icon_blob
                    else self.get_default_icon_for_url(url)
                )
            else:  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –∏–∫–æ–Ω–æ–∫
                url, title, visit_time = row
                icon = self.get_default_icon_for_url(url)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            display_title = title or url
            if len(display_title) > 60:
                display_title = display_title[:60] + "..."

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_url = url
            if len(display_url) > 80:
                display_url = display_url[:80] + "..."

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_time = self.format_visit_time(visit_time)

            item_text = f"{display_title}\nüîó {display_url}\nüìÖ {formatted_time}"
            item = QListWidgetItem(icon, item_text)
            item.setData(256, url)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL
            item.setData(257, title)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            item.setToolTip(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\nURL: {url}\n–í—Ä–µ–º—è: {formatted_time}")
            self.history_list.addItem(item)

    def format_visit_time(self, visit_time):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not visit_time or visit_time == "Unknown":
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è
            if isinstance(visit_time, str):
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
                time_formats = [
                    "%Y-%m-%d %H:%M:%S",
                    "%Y-%m-%d %H:%M:%S.%f",
                    "%Y-%m-%d",
                    "%d.%m.%Y %H:%M:%S",
                    "%d.%m.%Y %H:%M",
                    "%d/%m/%Y %H:%M:%S",
                ]

                parsed_time = None
                for fmt in time_formats:
                    try:
                        parsed_time = datetime.strptime(visit_time, fmt)
                        break
                    except ValueError:
                        continue

                if parsed_time:
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
                    now = datetime.now()
                    delta = now - parsed_time

                    if delta.days == 0:
                        # –°–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è
                        return f"–°–µ–≥–æ–¥–Ω—è, {parsed_time.strftime('%H:%M')}"
                    elif delta.days == 1:
                        # –í—á–µ—Ä–∞
                        return f"–í—á–µ—Ä–∞, {parsed_time.strftime('%H:%M')}"
                    elif delta.days < 7:
                        # –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
                        weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
                        weekday = weekdays[parsed_time.weekday()]
                        return f"{weekday}, {parsed_time.strftime('%H:%M')}"
                    elif delta.days < 365:
                        # –í —ç—Ç–æ–º –≥–æ–¥—É
                        return parsed_time.strftime("%d.%m, %H:%M")
                    else:
                        # –î–∞–≤–Ω–æ
                        return parsed_time.strftime("%d.%m.%Y")
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    return visit_time
            else:
                return str(visit_time)

        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return str(visit_time) if visit_time else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def get_default_icon_for_url(self, url):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç URL"""
        try:
            domain = urlparse(url).netloc.lower()

            # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É —Å –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π –¥–æ–º–µ–Ω–∞
            pixmap = QPixmap(16, 16)
            pixmap.fill(Qt.GlobalColor.transparent)

            painter = QPainter(pixmap)
            painter.setRenderHint(QPainter.RenderHint.Antialiasing)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–æ –¥–æ–º–µ–Ω—É
            if "google" in domain:
                color = QColor(66, 133, 244)  # Google Blue
                letter = "G"
            elif "github" in domain:
                color = QColor(36, 41, 46)  # GitHub Dark
                letter = "G"
            elif "stackoverflow" in domain:
                color = QColor(244, 128, 36)  # Stack Overflow Orange
                letter = "S"
            elif "wikipedia" in domain:
                color = QColor(153, 153, 153)  # Wikipedia Gray
                letter = "W"
            elif "youtube" in domain:
                color = QColor(255, 0, 0)  # YouTube Red
                letter = "Y"
            elif "facebook" in domain:
                color = QColor(24, 119, 242)  # Facebook Blue
                letter = "F"
            elif "twitter" in domain:
                color = QColor(29, 161, 242)  # Twitter Blue
                letter = "T"
            elif "reddit" in domain:
                color = QColor(255, 69, 0)  # Reddit Orange
                letter = "R"
            elif "amazon" in domain:
                color = QColor(255, 153, 0)  # Amazon Orange
                letter = "A"
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–º–µ–Ω–∞
                hash_val = hash(domain) % 360
                color = QColor.fromHsv(hash_val, 200, 200)
                letter = domain[0].upper() if domain else "W"

            # –†–∏—Å—É–µ–º –∫—Ä—É–≥ —Å —Ü–≤–µ—Ç–æ–º
            painter.setBrush(QBrush(color))
            painter.setPen(Qt.PenStyle.NoPen)
            painter.drawEllipse(1, 1, 14, 14)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –¥–æ–º–µ–Ω–∞
            font = QFont()
            font.setPixelSize(10)
            font.setBold(True)
            painter.setFont(font)
            painter.setPen(QColor(255, 255, 255))  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç

            painter.drawText(0, 0, 16, 16, Qt.AlignmentFlag.AlignCenter, letter)

            painter.end()
            return QIcon(pixmap)

        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
            pixmap = QPixmap(16, 16)
            pixmap.fill(QColor(100, 100, 100))
            return QIcon(pixmap)

    def open_history_item(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ"""
        current_item = self.history_list.currentItem()
        if current_item and self.parent_browser:
            url = current_item.data(256)
            if url:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ
                current_tab = self.parent_browser.tab_widget.currentWidget()
                if current_tab:
                    current_tab.navigate_to_url(url)
                    self.close()

    def open_in_new_tab(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ"""
        current_item = self.history_list.currentItem()
        if current_item and self.parent_browser:
            url = current_item.data(256)
            if url:
                self.parent_browser.new_tab(url)
                self.close()

    def copy_link(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        current_item = self.history_list.currentItem()
        if current_item:
            url = current_item.data(256)
            if url:
                clipboard = QApplication.clipboard()
                clipboard.setText(url)
                QMessageBox.information(
                    self, "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", f"–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:\n{url}"
                )

    def clear_history(self):
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
        )
        if reply == QMessageBox.StandardButton.Yes:
            self.db_manager.clear_history()
            self.refresh_history()
            QMessageBox.information(
                self, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞", "–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞!"
            )


class BookmarkManager(QDialog):
    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db_manager = db_manager
        self.parent_browser = parent
        self.setWindowTitle("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∞–º–∏")
        # self.setGeometry(300, 300, 700, 500)
        self.resize(400, 700)
        self.setStyleSheet("""
                    QListWidget::item {
                        color: blue;
                    }
                    QListWidget::item:hover {
                        color: #FF0000;
                        background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1,
                                                    stop: 0 #FAFBFE, stop: 1 lightblue);
                    }
                    QListWidget {
                        background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1,
                                                    stop: 0 lightblue, stop: 1 #FAFBFE);
                        border: 1px solid gray;
                        border-radius: 7px;
                        padding: 5px;
                    }
                    QListWidget::item:selected {
                        color: black;
                        background-color: #e3f2fd;
                    }
        """)

        layout = QVBoxLayout(self)

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –≤–∫–ª–∞–¥–æ–∫
        self.tab_widget = QTabWidget()
        layout.addWidget(self.tab_widget)

        # –í–∫–ª–∞–¥–∫–∞ "–í—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏"
        self.bookmarks_tab = QWidget()
        self.tab_widget.addTab(self.bookmarks_tab, "üìö –í—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏")
        self.setup_bookmarks_tab()

        # –í–∫–ª–∞–¥–∫–∞ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        self.favorites_tab = QWidget()
        self.tab_widget.addTab(self.favorites_tab, "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
        self.setup_favorites_tab()

        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        close_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_button.clicked.connect(self.close)
        button_layout.addStretch()
        button_layout.addWidget(close_button)
        layout.addLayout(button_layout)
        logger.info("‚úÖ –ó–∞–∫–ª–∞–¥–∫–∏ (BookmarkManager) –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        self.refresh_all()

    def setup_bookmarks_tab(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –≤—Å–µ—Ö –∑–∞–∫–ª–∞–¥–æ–∫"""
        layout = QVBoxLayout(self.bookmarks_tab)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("üìö –í—Å–µ –∑–∞–∫–ª–∞–¥–∫–∏")
        header_label.setStyleSheet("font-size: 14px; font-weight: bold; margin: 5px;")
        layout.addWidget(header_label)

        # –°–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫
        self.bookmark_list = QListWidget()

        self.bookmark_list.itemDoubleClicked.connect(self.open_bookmark)
        layout.addWidget(self.bookmark_list)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∞–º–∏
        bookmark_buttons = QHBoxLayout()

        refresh_bookmarks_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_bookmarks_button.clicked.connect(self.refresh_bookmarks)
        bookmark_buttons.addWidget(refresh_bookmarks_button)

        open_bookmark_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å")
        open_bookmark_button.clicked.connect(self.open_bookmark)
        bookmark_buttons.addWidget(open_bookmark_button)

        add_to_favorites_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        add_to_favorites_button.clicked.connect(self.add_to_favorites)
        bookmark_buttons.addWidget(add_to_favorites_button)

        remove_bookmark_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        remove_bookmark_button.clicked.connect(self.remove_bookmark)
        bookmark_buttons.addWidget(remove_bookmark_button)

        layout.addLayout(bookmark_buttons)

    def setup_favorites_tab(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        layout = QVBoxLayout(self.favorites_tab)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–ª–∞–¥–∫–∏")
        header_label.setStyleSheet("font-size: 14px; font-weight: bold; margin: 5px;")
        layout.addWidget(header_label)

        # –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        self.favorites_list = QListWidget()

        self.favorites_list.itemDoubleClicked.connect(self.open_favorite)
        layout.addWidget(self.favorites_list)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º
        favorites_buttons = QHBoxLayout()

        refresh_favorites_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_favorites_button.clicked.connect(self.refresh_favorites)
        favorites_buttons.addWidget(refresh_favorites_button)

        open_favorite_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å")
        open_favorite_button.clicked.connect(self.open_favorite)
        favorites_buttons.addWidget(open_favorite_button)

        remove_from_favorites_button = QPushButton("–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        remove_from_favorites_button.clicked.connect(self.remove_from_favorites)
        favorites_buttons.addWidget(remove_from_favorites_button)

        delete_favorite_button = QPushButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        delete_favorite_button.clicked.connect(self.delete_favorite)
        favorites_buttons.addWidget(delete_favorite_button)

        layout.addLayout(favorites_buttons)

    def refresh_all(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫"""
        self.refresh_bookmarks()
        self.refresh_favorites()

    def refresh_bookmarks(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–ª–∞–¥–æ–∫"""
        self.bookmark_list.clear()
        bookmarks = self.db_manager.get_bookmarks()

        for row in bookmarks:
            if len(row) >= 5:  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∏–∫–æ–Ω–∫–∞–º–∏
                url, title, icon_blob, is_favorite, added_time = row
                if icon_blob:
                    icon = self.db_manager.blob_to_icon(icon_blob)
                else:
                    # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∑–∞–∫–ª–∞–¥–∫–∏
                    icon = self.get_default_icon_for_url(url)
                favorite_mark = "‚≠ê " if is_favorite else "üìÑ "
            else:  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –∏–∫–æ–Ω–æ–∫
                url, title, added_time = row
                icon = self.get_default_icon_for_url(url)
                favorite_mark = "üìÑ "

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            display_title = title or url
            if len(display_title) > 50:
                display_title = display_title[:50] + "..."

            item_text = (
                f"{favorite_mark}{display_title}\n   üîó {url}\n   üìÖ {added_time}"
            )
            item = QListWidgetItem(icon, item_text)
            item.setData(256, url)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL
            item.setData(257, title)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            item.setData(
                258, is_favorite if len(row) >= 5 else False
            )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            self.bookmark_list.addItem(item)

    def get_default_icon_for_url(self, url):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç URL"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —á—Ç–æ –∏ –≤ HistoryManager
        try:
            domain = urlparse(url).netloc.lower()

            # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É —Å –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π –¥–æ–º–µ–Ω–∞
            pixmap = QPixmap(16, 16)
            pixmap.fill(Qt.GlobalColor.transparent)

            painter = QPainter(pixmap)
            painter.setRenderHint(QPainter.RenderHint.Antialiasing)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–æ –¥–æ–º–µ–Ω—É
            if "google" in domain:
                color = QColor(66, 133, 244)  # Google Blue
                letter = "G"
            elif "github" in domain:
                color = QColor(36, 41, 46)  # GitHub Dark
                letter = "G"
            elif "stackoverflow" in domain:
                color = QColor(244, 128, 36)  # Stack Overflow Orange
                letter = "S"
            elif "wikipedia" in domain:
                color = QColor(153, 153, 153)  # Wikipedia Gray
                letter = "W"
            elif "youtube" in domain:
                color = QColor(255, 0, 0)  # YouTube Red
                letter = "Y"
            elif "facebook" in domain:
                color = QColor(24, 119, 242)  # Facebook Blue
                letter = "F"
            elif "twitter" in domain:
                color = QColor(29, 161, 242)  # Twitter Blue
                letter = "T"
            elif "reddit" in domain:
                color = QColor(255, 69, 0)  # Reddit Orange
                letter = "R"
            elif "amazon" in domain:
                color = QColor(255, 153, 0)  # Amazon Orange
                letter = "A"
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–º–µ–Ω–∞
                hash_val = hash(domain) % 360
                color = QColor.fromHsv(hash_val, 200, 200)
                letter = domain[0].upper() if domain else "W"

            # –†–∏—Å—É–µ–º –∫—Ä—É–≥ —Å —Ü–≤–µ—Ç–æ–º
            painter.setBrush(QBrush(color))
            painter.setPen(Qt.PenStyle.NoPen)
            painter.drawEllipse(1, 1, 14, 14)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –¥–æ–º–µ–Ω–∞
            font = QFont()
            font.setPixelSize(10)
            font.setBold(True)
            painter.setFont(font)
            painter.setPen(QColor(255, 255, 255))  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç

            painter.drawText(0, 0, 16, 16, Qt.AlignmentFlag.AlignCenter, letter)

            painter.end()
            return QIcon(pixmap)

        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
            pixmap = QPixmap(16, 16)
            pixmap.fill(QColor(100, 100, 100))
            return QIcon(pixmap)

    def refresh_favorites(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        self.favorites_list.clear()
        favorites = self.db_manager.get_favorites()

        for url, title, icon_blob in favorites:
            if icon_blob:
                icon = self.db_manager.blob_to_icon(icon_blob)
            else:
                # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                icon = self.get_default_icon_for_url(url)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            display_title = title or url
            if len(display_title) > 50:
                display_title = display_title[:50] + "..."

            item_text = f"‚≠ê {display_title}\n   üîó {url}"
            item = QListWidgetItem(icon, item_text)
            item.setData(256, url)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL
            item.setData(257, title)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            self.favorites_list.addItem(item)

    def open_bookmark(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–∫–ª–∞–¥–∫—É"""
        current_item = self.bookmark_list.currentItem()
        if current_item and self.parent_browser:
            url = current_item.data(256)
            if url:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                self.parent_browser.new_tab(url)
                self.close()

    def open_favorite(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        current_item = self.favorites_list.currentItem()
        if current_item and self.parent_browser:
            url = current_item.data(256)
            if url:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                self.parent_browser.new_tab(url)
                self.close()

    def add_to_favorites(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–∫–ª–∞–¥–∫—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        current_item = self.bookmark_list.currentItem()
        if current_item:
            url = current_item.data(256)
            is_favorite = current_item.data(258)

            if not is_favorite:
                self.db_manager.toggle_favorite(url)
                self.refresh_all()

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                if self.parent_browser:
                    self.parent_browser.favorites_bar.refresh_favorites()

                QMessageBox.information(
                    self, "–î–æ–±–∞–≤–ª–µ–Ω–æ", "–ó–∞–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"
                )
            else:
                QMessageBox.information(
                    self, "–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º", "–≠—Ç–∞ –∑–∞–∫–ª–∞–¥–∫–∞ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!"
                )

    def remove_from_favorites(self):
        """–£–±–∏—Ä–∞–µ—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–Ω–æ –Ω–µ —É–¥–∞–ª—è–µ—Ç –∑–∞–∫–ª–∞–¥–∫—É)"""
        current_item = self.favorites_list.currentItem()
        if current_item:
            url = current_item.data(256)
            title = current_item.data(257)

            reply = QMessageBox.question(
                self,
                "–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                f"–£–±—Ä–∞—Ç—å '{title}' –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ?\n\n–ó–∞–∫–ª–∞–¥–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ.",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            )

            if reply == QMessageBox.StandardButton.Yes:
                self.db_manager.toggle_favorite(url)
                self.refresh_all()

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                if self.parent_browser:
                    self.parent_browser.favorites_bar.refresh_favorites()

                QMessageBox.information(
                    self, "–£–±—Ä–∞–Ω–æ", "–ó–∞–∫–ª–∞–¥–∫–∞ —É–±—Ä–∞–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!"
                )

    def delete_favorite(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—É—é –∑–∞–∫–ª–∞–¥–∫—É"""
        current_item = self.favorites_list.currentItem()
        if current_item:
            url = current_item.data(256)
            title = current_item.data(257)

            reply = QMessageBox.question(
                self,
                "–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É",
                f"–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å '{title}'?\n\n–ó–∞–∫–ª–∞–¥–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞.",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            )

            if reply == QMessageBox.StandardButton.Yes:
                self.db_manager.remove_bookmark(url)
                self.refresh_all()

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                if self.parent_browser:
                    self.parent_browser.favorites_bar.refresh_favorites()

                QMessageBox.information(self, "–£–¥–∞–ª–µ–Ω–æ", "–ó–∞–∫–ª–∞–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")

    def remove_bookmark(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–∫–ª–∞–¥–∫—É"""
        current_item = self.bookmark_list.currentItem()
        if current_item:
            url = current_item.data(256)
            title = current_item.data(257)

            reply = QMessageBox.question(
                self,
                "–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É",
                f"–£–¥–∞–ª–∏—Ç—å '{title}'?\n\n–ó–∞–∫–ª–∞–¥–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞.",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            )

            if reply == QMessageBox.StandardButton.Yes:
                self.db_manager.remove_bookmark(url)
                self.refresh_all()

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                if self.parent_browser:
                    self.parent_browser.favorites_bar.refresh_favorites()

                QMessageBox.information(self, "–£–¥–∞–ª–µ–Ω–æ", "–ó–∞–∫–ª–∞–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")


class SettingsManager(QDialog):
    def __init__(self, db_manager, parent_browser=None, parent=None):
        super().__init__(parent)
        self.db_manager = db_manager
        self.parent_browser = parent_browser
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.setGeometry(300, 300, 400, 300)

        layout = QVBoxLayout(self)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫
        download_group = QGroupBox("–ó–∞–≥—Ä—É–∑–∫–∏")
        download_layout = QVBoxLayout()

        download_path_layout = QHBoxLayout()
        download_path_layout.addWidget(QLabel("–ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫:"))
        self.download_path_edit = QLineEdit(
            self.db_manager.get_setting("download_path", "")
        )
        browse_button = QPushButton("–û–±–∑–æ—Ä")
        browse_button.clicked.connect(self.browse_download_path)

        download_path_layout.addWidget(self.download_path_edit)
        download_path_layout.addWidget(browse_button)
        download_layout.addLayout(download_path_layout)

        download_group.setLayout(download_layout)
        layout.addWidget(download_group)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AdBlock
        adblock_group = QGroupBox("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã")
        adblock_layout = QVBoxLayout()

        self.adblock_checkbox = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ä–µ–∫–ª–∞–º—ã")
        self.adblock_checkbox.setChecked(
            self.db_manager.get_setting("adblock_enabled", "true") == "true"
        )
        self.adblock_checkbox.stateChanged.connect(self.toggle_adblock)
        adblock_layout.addWidget(self.adblock_checkbox)

        # –†–µ–∂–∏–º AdBlock
        adblock_mode_layout = QHBoxLayout()
        adblock_mode_layout.addWidget(QLabel("–†–µ–∂–∏–º AdBlock:"))

        self.adblock_mode_combo = QComboBox()
        self.adblock_mode_combo.addItems(["–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (EasyList)", "–ë–∞–∑–æ–≤—ã–π"])
        current_mode = self.db_manager.get_setting("adblock_mode", "advanced")
        self.adblock_mode_combo.setCurrentIndex(0 if current_mode == "advanced" else 1)
        adblock_mode_layout.addWidget(self.adblock_mode_combo)

        adblock_layout.addLayout(adblock_mode_layout)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AdBlock
        if self.parent_browser:
            stats_label = QLabel(
                f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ URL: {self.parent_browser.get_adblock_stats()}"
            )
            adblock_layout.addWidget(stats_label)

        adblock_group.setLayout(adblock_layout)
        layout.addWidget(adblock_group)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_button.clicked.connect(self.save_settings)
        layout.addWidget(save_button)
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def browse_download_path(self):
        path = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫")
        if path:
            self.download_path_edit.setText(path)
            logger.info(f"‚úÖ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {path}")

    def toggle_adblock(self, state):
        enabled = state == 2  # Qt.CheckState.Checked
        self.db_manager.save_setting("adblock_enabled", "true" if enabled else "false")
        if self.parent_browser:
            self.parent_browser.toggle_adblock(enabled)
            logger.info(
                f"‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã {'–≤–∫–ª—é—á–µ–Ω–∞' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}"
            )

    def save_settings(self):
        self.db_manager.save_setting("download_path", self.download_path_edit.text())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º AdBlock
        if hasattr(self, "adblock_mode_combo"):
            mode = (
                "advanced" if self.adblock_mode_combo.currentIndex() == 0 else "basic"
            )
            self.db_manager.save_setting("adblock_mode", mode)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            if self.parent_browser:
                self.parent_browser.use_advanced_adblock = mode == "advanced"
                if (
                    self.parent_browser.db_manager.get_setting(
                        "adblock_enabled", "true"
                    )
                    == "true"
                ):
                    self.parent_browser.toggle_adblock(True)
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        QMessageBox.information(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


class MainBrowser(QMainWindow):
    def __init__(self, profile_name="default"):
        super().__init__()
        logger.info("MainBrowser loaded")
        self.db_manager = DatabaseManager()
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
        self.browser_profile = BrowserProfile(profile_name)
        self.current_profile = self.browser_profile.get_profile()
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.adblock_interceptor = self.browser_profile.interceptor
        self.legacy_adblock_interceptor = LegacyAdBlocker()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º AdBlock (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–∞–∑–æ–≤—ã–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        saved_mode = self.db_manager.get_setting("adblock_mode", "basic")
        self.use_advanced_adblock = saved_mode == "advanced"

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
        self.active_downloads = {}

        self.init_ui()

        self.setup_adblock()
        # self.setup_download_handling()
        # logger.info("MainBrowser download handling setup completed")

    def init_ui(self):
        self.setWindowTitle("OBrowser")
        self.setWindowIcon(QIcon(os.path.join("images", "browser.png")))
        self.setGeometry(100, 100, 1200, 800)
        self.setIconSize(QSize(32, 32))
        self.setStyleSheet("""
                            QTabWidget::tab-bar {
                                border: 2px solid blue;
                            }
                            QTabWidget::pane { 
                                border: none;
                            }
                            QTabBar {
                                background-color: #DBDBDB;
                            }
                            QTabBar::tab {
                                background-color: black;
                                color: white;
                                padding: 6px 6px 6px 6px;
                                border-top-left-radius: 10px;
                                border-top-right-radius: 10px;
                                max-width: 200px;
                                text-align: left;
                            }
                            QTabBar::tab:!selected {
                                background-color: transparent; 
                            }
                            QTabBar::tab:!selected:hover {
                                background-color: #D8BFD8;
                            }
                            QTabBar::tab:selected {
                                background-color: #92C6D9; 
                                color: white;;
                            }
                            QStatusBar {
                                color: blue;
                                font-size: 12px;
                                border: 1px solid gray;
                                border-radius: 7px;
                            }
                            QStatusBar::QProgressBar {
                                border: 2px solid #2196F3;     
                                border-radius: 7px;
                                background-color: #E0E0E0;
                                color: gray;
                            }
                            QPushButton {
                                background-color: transparent;
                                border: 1px outset gray;
                                padding: 2px 3px;
                                border-radius: 7px;
                            }
                            QPushButton:hover {
                                background-color: #e0e0e0;
                                color: blue;
                            }
                            QPushButton:pressed {
                                background-color: #d0d0d0;
                            }
                            QToolTip {
                                background-color: #CCF0FE;
                                color: blue;
                                border: 2px dashed #FF0000;
                                border-radius: 7px;
                                padding: 2px;
                                font: 10pt "Segoe UI";
                            }
                        """)
        logger.info("–°—Ç–∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)

        # –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_layout = QHBoxLayout()
        nav_layout.setContentsMargins(3, 2, 3, 2)

        self.back_button = QPushButton("")
        self.back_button.setStyleSheet("""QPushButton {
                background-color: transparent;
                border: none;
                padding: 5px 10px;
                text-align: left;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #e0e0e0;
            }
            QPushButton:pressed {
                background-color: #d0d0d0;
            }""")
        self.back_button.setIcon(QIcon(os.path.join("images", "back.png")))
        self.back_button.setToolTip("–ù–∞–∑–∞–¥")
        self.forward_button = QPushButton("")
        self.forward_button.setStyleSheet("""QPushButton {
                background-color: transparent;
                border: none;
                padding: 5px 10px;
                text-align: left;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #e0e0e0;
            }
            QPushButton:pressed {
                background-color: #d0d0d0;
            }""")
        self.forward_button.setIcon(QIcon(os.path.join("images", "forward.png")))
        self.forward_button.setToolTip("–í–ø–µ—Ä–µ–¥")
        self.reload_button = QPushButton("")
        self.reload_button.setStyleSheet("""QPushButton {
                background-color: transparent;
                border: none;
                padding: 5px 10px;
                text-align: left;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #e0e0e0;
            }
            QPushButton:pressed {
                background-color: #d0d0d0;
            }""")
        self.reload_button.setIcon(QIcon(os.path.join("images", "refresh.png")))
        self.reload_button.setToolTip("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        self.home_button = QPushButton("")
        self.home_button.setStyleSheet("""QPushButton {
                background-color: transparent;
                border: none;
                padding: 5px 10px;
                text-align: left;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #e0e0e0;
            }
            QPushButton:pressed {
                background-color: #d0d0d0;
            }""")
        self.home_button.setIcon(QIcon(os.path.join("images", "home.png")))
        self.home_button.setToolTip("–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")

        self.address_bar = QLineEdit()
        self.address_bar.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ URL –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        self.address_bar.returnPressed.connect(self.navigate_to_url)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏ —â–µ–ª—á–∫–µ
        self.address_bar.mousePressEvent = self.address_bar_click

        self.bookmark_button = QPushButton("")
        self.bookmark_button.setStyleSheet("""QPushButton {
                background-color: transparent;
                border: none;
                padding: 5px 10px;
                text-align: left;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #e0e0e0;
            }
            QPushButton:pressed {
                background-color: #d0d0d0;
            }""")
        self.bookmark_button.setIcon(QIcon(os.path.join("images", "bookmarks_.png")))
        self.bookmark_button.setToolTip("–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏")
        self.bookmark_button.clicked.connect(self.add_bookmark)

        nav_layout.addWidget(self.back_button)
        nav_layout.addWidget(self.forward_button)
        nav_layout.addWidget(self.reload_button)
        nav_layout.addWidget(self.home_button)
        nav_layout.addWidget(self.address_bar)
        nav_layout.addWidget(self.bookmark_button)

        main_layout.addLayout(nav_layout)

        # –ü–∞–Ω–µ–ª—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        self.favorites_bar = FavoritesBar(self.db_manager, self)
        main_layout.addWidget(self.favorites_bar)

        # –í–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        self.tab_widget.setDocumentMode(True)
        self.tab_widget.setTabsClosable(True)
        self.tab_widget.setMovable(True)
        self.tab_widget.tabCloseRequested.connect(self.close_tab)
        self.tab_widget.currentChanged.connect(self.tab_changed)
        self.tab_widget.tabBarDoubleClicked.connect(self.tab_bar_double_click)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
        # self.tab_widget.mouseDoubleClickEvent = self.tab_widget_double_click

        # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
        # new_tab_button = QPushButton("")
        # new_tab_button.setIcon(QIcon(os.path.join("images", "plus.png")))
        # new_tab_button.setMaximumWidth(30)
        # new_tab_button.setToolTip(
        #     "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É\n(–∏–ª–∏ –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏)"
        # )
        # new_tab_button.setStyleSheet("""QPushButton {
        #         background-color: transparent;
        #         border: none;
        #         padding: 5px 10px;
        #         text-align: left;
        #         border-radius: 5px;
        #     }
        #     QPushButton:hover {
        #         background-color: #e0e0e0;
        #     }
        #     QPushButton:pressed {
        #         background-color: #d0d0d0;
        #     }""")
        # new_tab_button.clicked.connect(self.new_tab)
        # self.tab_widget.setCornerWidget(new_tab_button)

        main_layout.addWidget(self.tab_widget)

        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.status_bar.addPermanentWidget(self.progress_bar)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–∞—Å—à—Ç–∞–±–∞ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π)
        self.zoom_label = QLabel("100%")
        self.zoom_label.setMinimumWidth(50)
        self.zoom_label.setStyleSheet("""
            QLabel {
                padding: 2px 5px;
                border: 1px solid #ccc;
                border-radius: 3px;
                background-color: #f9f9f9;
            }
            QLabel:hover {
                background-color: #e6e6e6;
                border-color: #999;
            }
        """)
        self.zoom_label.setToolTip("–ú–∞—Å—à—Ç–∞–± —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—â–µ–ª–∫–Ω–∏—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–±—Ä–æ—Å–∞)")
        self.zoom_label.mousePressEvent = self.zoom_label_clicked
        self.status_bar.addPermanentWidget(self.zoom_label)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.back_button.clicked.connect(self.go_back)
        self.forward_button.clicked.connect(self.go_forward)
        self.reload_button.clicked.connect(self.reload_page)
        self.home_button.clicked.connect(self.go_home)
        logger.info("–±—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        self.setup_address_bar()

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        self.create_menu()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        favorites_visible = self.db_manager.get_setting("favorites_bar_visible", "true")
        if favorites_visible == "false":
            self.favorites_bar.hide()

        # –ü–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞
        try:
            self.new_tab("https://www.google.com", self.current_profile)
            logger.info("‚úÖ –ü–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏: {e}")
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏: {e}")
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–∫–ª–∞–¥–∫—É
            try:
                tab = BrowserTab("https://www.google.com", None)
                index = self.tab_widget.addTab(tab, "Google")
                self.tab_widget.setCurrentIndex(index)
            except Exception as e2:
                logger.error(f"üÜò –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e2}")
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –≤–∫–ª–∞–¥–∫—É
                label = QLabel("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏")
                self.tab_widget.addTab(label, "–û—à–∏–±–∫–∞")

    def tab_bar_double_click(self, index):
        if index == -1:
            self.new_tab("https://www.google.com")
            self.update_status_bar("üìë –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º")
        else:
            # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∫–ª–∞–¥–∫–µ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            self.update_status_bar("üìë –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ - –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç")

    def create_menu(self):
        menubar = self.menuBar()

        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = menubar.addMenu("–§–∞–π–ª")

        new_tab_action = QAction(
            QIcon(os.path.join("images", "newtab.png")), "–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞", self
        )
        new_tab_action.setShortcut("Ctrl+T")
        new_tab_action.setStatusTip(
            "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É (Ctrl+T –∏–ª–∏ –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –≤–∫–ª–∞–¥–æ–∫)"
        )
        new_tab_action.triggered.connect(self.new_tab)
        file_menu.addAction(new_tab_action)

        new_window_action = QAction(
            QIcon(os.path.join("images", "window.png")), "–ù–æ–≤–æ–µ –æ–∫–Ω–æ", self
        )
        new_window_action.setShortcut("Ctrl+N")
        new_window_action.triggered.connect(self.new_window)
        file_menu.addAction(new_window_action)

        new_profile_action = QAction(
            QIcon(os.path.join("images", "profile.png")), "–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", self
        )
        new_profile_action.setShortcut("Ctrl+Shift+N")
        new_profile_action.triggered.connect(self.new_profile_window)
        file_menu.addAction(new_profile_action)

        file_menu.addSeparator()

        # –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
        open_html_action = QAction(
            QIcon(os.path.join("images", "html.png")), "–û—Ç–∫—Ä—ã—Ç—å HTML —Ñ–∞–π–ª", self
        )
        open_html_action.setShortcut("Ctrl+O")
        open_html_action.triggered.connect(self.open_html_file)
        file_menu.addAction(open_html_action)

        # –ü–æ–¥–º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_submenu = file_menu.addMenu(
            QIcon(os.path.join("images", "savemod.png")), "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫..."
        )

        save_mhtml_action = QAction(
            QIcon(os.path.join("images", "mhtml.png")), "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ MHTML", self
        )
        save_mhtml_action.setShortcut("Ctrl+S")
        save_mhtml_action.triggered.connect(self.save_current_page_mhtml)
        save_submenu.addAction(save_mhtml_action)

        save_html_action = QAction(
            QIcon(os.path.join("images", "html_.png")), "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ HTML", self
        )
        save_html_action.setShortcut("Ctrl+Shift+S")
        save_html_action.triggered.connect(self.save_current_page_html)
        save_submenu.addAction(save_html_action)

        save_pdf_action = QAction(
            QIcon(os.path.join("images", "pdf.png")), "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF", self
        )
        save_pdf_action.setShortcut("Ctrl+P")
        save_pdf_action.triggered.connect(self.save_current_page_pdf)
        save_submenu.addAction(save_pdf_action)

        file_menu.addSeparator()

        exit_action = QAction(QIcon(os.path.join("images", "exit.png")), "–í—ã—Ö–æ–¥", self)
        exit_action.setShortcut("Ctrl+Q")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # –ú–µ–Ω—é –ò—Å—Ç–æ—Ä–∏—è
        history_menu = menubar.addMenu("–ò—Å—Ç–æ—Ä–∏—è")

        show_history_action = QAction(
            QIcon(os.path.join("images", "history.png")), "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", self
        )
        show_history_action.triggered.connect(self.show_history)
        history_menu.addAction(show_history_action)

        # –ú–µ–Ω—é –ó–∞–∫–ª–∞–¥–∫–∏
        bookmarks_menu = menubar.addMenu("–ó–∞–∫–ª–∞–¥–∫–∏")

        add_bookmark_action = QAction(
            QIcon(os.path.join("images", "bookmark.png")), "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É", self
        )
        add_bookmark_action.setShortcut("Ctrl+D")
        add_bookmark_action.triggered.connect(self.add_bookmark)
        bookmarks_menu.addAction(add_bookmark_action)

        bookmarks_menu.addSeparator()

        show_bookmarks_action = QAction(
            QIcon(os.path.join("images", "bookmark1.png")),
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∞–º–∏",
            self,
        )
        show_bookmarks_action.triggered.connect(self.show_bookmarks)
        bookmarks_menu.addAction(show_bookmarks_action)

        # –ú–µ–Ω—é –í–∏–¥
        view_menu = menubar.addMenu("–í–∏–¥")

        # –ü–æ–¥–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–æ–º
        zoom_submenu = view_menu.addMenu(
            QIcon(os.path.join("images", "zoom.png")), "–ú–∞—Å—à—Ç–∞–±"
        )

        zoom_in_action = QAction(
            QIcon(os.path.join("images", "zoomin.png")), "–£–≤–µ–ª–∏—á–∏—Ç—å", self
        )
        zoom_in_action.setShortcut("Ctrl++")
        zoom_in_action.triggered.connect(self.zoom_in)
        zoom_submenu.addAction(zoom_in_action)

        zoom_out_action = QAction(
            QIcon(os.path.join("images", "zoomout.png")), "–£–º–µ–Ω—å—à–∏—Ç—å", self
        )
        zoom_out_action.setShortcut("Ctrl+-")
        zoom_out_action.triggered.connect(self.zoom_out)
        zoom_submenu.addAction(zoom_out_action)

        reset_zoom_action = QAction(
            QIcon(os.path.join("images", "zoomreset.png")),
            "–°–±—Ä–æ—Å–∏—Ç—å –º–∞—Å—à—Ç–∞–± (100%)",
            self,
        )
        reset_zoom_action.setShortcut("Ctrl+0")
        reset_zoom_action.triggered.connect(self.reset_zoom)
        zoom_submenu.addAction(reset_zoom_action)

        zoom_submenu.addSeparator()

        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–∞—Å—à—Ç–∞–±—ã
        zoom_50_action = QAction("50%", self)
        zoom_50_action.triggered.connect(lambda: self.set_zoom(0.5))
        zoom_submenu.addAction(zoom_50_action)

        zoom_75_action = QAction("75%", self)
        zoom_75_action.triggered.connect(lambda: self.set_zoom(0.75))
        zoom_submenu.addAction(zoom_75_action)

        zoom_100_action = QAction("100%", self)
        zoom_100_action.triggered.connect(lambda: self.set_zoom(1.0))
        zoom_submenu.addAction(zoom_100_action)

        zoom_125_action = QAction("125%", self)
        zoom_125_action.triggered.connect(lambda: self.set_zoom(1.25))
        zoom_submenu.addAction(zoom_125_action)

        zoom_150_action = QAction("150%", self)
        zoom_150_action.triggered.connect(lambda: self.set_zoom(1.5))
        zoom_submenu.addAction(zoom_150_action)

        zoom_200_action = QAction("200%", self)
        zoom_200_action.triggered.connect(lambda: self.set_zoom(2.0))
        zoom_submenu.addAction(zoom_200_action)

        zoom_submenu.addSeparator()

        # –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        fullscreen_action = QAction(
            QIcon(os.path.join("images", "fullscreen.png")), "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º", self
        )
        fullscreen_action.setShortcut("F11")
        fullscreen_action.triggered.connect(self.toggle_fullscreen)
        view_menu.addAction(fullscreen_action)

        view_menu.addSeparator()

        # –ü–∞–Ω–µ–ª–∏
        toggle_favorites_bar_action = QAction(
            QIcon(os.path.join("images", "favorite.png")),
            "–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
            self,
        )
        toggle_favorites_bar_action.triggered.connect(self.toggle_favorites_bar)
        view_menu.addAction(toggle_favorites_bar_action)

        # –ú–µ–Ω—é –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools_menu = menubar.addMenu("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")

        downloads_action = QAction(
            QIcon(os.path.join("images", "download.png")), "–ó–∞–≥—Ä—É–∑–∫–∏", self
        )
        downloads_action.triggered.connect(self.show_downloads)
        tools_menu.addAction(downloads_action)

        settings_action = QAction(
            QIcon(os.path.join("images", "settings.png")), "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", self
        )
        settings_action.triggered.connect(self.show_settings)
        tools_menu.addAction(settings_action)

        profile_info_action = QAction(
            QIcon(os.path.join("images", "userprofile.png")),
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ",
            self,
        )
        profile_info_action.triggered.connect(self.show_profile_info)
        tools_menu.addAction(profile_info_action)

        backup_profile_action = QAction(
            QIcon(os.path.join("images", "backup.png")),
            "–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–æ—Ñ–∏–ª—è",
            self,
        )
        backup_profile_action.triggered.connect(self.backup_profile)
        tools_menu.addAction(backup_profile_action)

        tools_menu.addSeparator()

        # AdBlock –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        adblock_submenu = tools_menu.addMenu(
            QIcon(os.path.join("images", "adblockplus.png")), "AdBlock"
        )

        # –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ/–≤–∫–ª—é—á–µ–Ω–∏–µ AdBlock
        disable_adblock_action = QAction(
            QIcon(os.path.join("images", "adblockoff.png")),
            "–û—Ç–∫–ª—é—á–∏—Ç—å AdBlock –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞",
            self,
        )
        disable_adblock_action.triggered.connect(self.disable_adblock_for_site)
        adblock_submenu.addAction(disable_adblock_action)

        enable_adblock_action = QAction(
            QIcon(os.path.join("images", "adblock.png")),
            "–í–∫–ª—é—á–∏—Ç—å AdBlock",
            self,
        )
        enable_adblock_action.triggered.connect(lambda: self.toggle_adblock(True))
        adblock_submenu.addAction(enable_adblock_action)

        adblock_submenu.addSeparator()

        toggle_adblock_mode_action = QAction(
            QIcon(os.path.join("images", "offone.png")),
            "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º AdBlock",
            self,
        )
        toggle_adblock_mode_action.triggered.connect(self.toggle_adblock_mode)
        adblock_submenu.addAction(toggle_adblock_mode_action)

        show_adblock_stats_action = QAction(
            QIcon(os.path.join("images", "statistics.png")),
            "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏",
            self,
        )
        show_adblock_stats_action.triggered.connect(self.show_adblock_stats)
        adblock_submenu.addAction(show_adblock_stats_action)

        view_blocked_urls_action = QAction(
            QIcon(os.path.join("images", "listurl.png")),
            "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ URL",
            self,
        )
        view_blocked_urls_action.triggered.connect(self.view_blocked_urls)
        adblock_submenu.addAction(view_blocked_urls_action)

        add_custom_rule_action = QAction(
            QIcon(os.path.join("images", "ruleadd.png")),
            "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ",
            self,
        )
        add_custom_rule_action.triggered.connect(self.add_custom_adblock_rule)
        adblock_submenu.addAction(add_custom_rule_action)

        tools_menu.addSeparator()

        clear_data_action = QAction(
            QIcon(os.path.join("images", "clearall.png")),
            "–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–∞",
            self,
        )
        clear_data_action.triggered.connect(self.clear_browser_data)
        tools_menu.addAction(clear_data_action)

        reset_for_google_action = QAction(
            QIcon(os.path.join("images", "skip.png")),
            "–°–±—Ä–æ—Å–∏—Ç—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google",
            self,
        )
        reset_for_google_action.triggered.connect(self.reset_for_google_auth)
        tools_menu.addAction(reset_for_google_action)

        google_mode_action = QAction(
            QIcon(os.path.join("images", "google.png")),
            "–†–µ–∂–∏–º Google (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)",
            self,
        )
        google_mode_action.triggered.connect(self.enable_google_mode)
        tools_menu.addAction(google_mode_action)
        logger.info("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

    def show_profile_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ñ–∏–ª–µ"""
        info = self.browser_profile.get_profile_info()
        # print(info)
        msg = QMessageBox(self)
        msg.setIcon(QMessageBox.Icon.Information)
        msg.setWindowTitle("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –±—Ä–∞—É–∑–µ—Ä–∞")
        msg.setText("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π:")

        info_text = f"""
üìÅ –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è: {info["name"]}
üìÇ –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º: {info["path"]}
üíæ –ü—É—Ç—å –∫—ç—à–∞: {info["cache_path"]}
üç™ –ü–æ–ª–∏—Ç–∏–∫–∞ cookies: {info["cookies_policy"]}
üóÉÔ∏è –¢–∏–ø –∫—ç—à–∞: {info["cache_type"]}
üìä –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {info["cache_max_size"] // (1024 * 1024)} –ú–ë

üìã –§–∞–π–ª—ã –ø—Ä–æ—Ñ–∏–ª—è:
"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        profile_files = [
            ("Cookies", "üç™ –§–∞–π–ª cookies"),
            ("Local Storage", "üíæ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"),
            ("Session Storage", "üì± –°–µ—Å—Å–∏–æ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"),
            ("IndexedDB", "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö IndexedDB"),
            ("Web Data", "üåê –í–µ–±-–¥–∞–Ω–Ω—ã–µ"),
            ("Preferences", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        ]

        for filename, description in profile_files:
            file_path = os.path.join(info["path"], filename)

            if os.path.exists(file_path):
                if os.path.isdir(file_path):
                    size = sum(
                        os.path.getsize(os.path.join(file_path, f))
                        for f in os.listdir(file_path)
                        if os.path.isfile(os.path.join(file_path, f))
                    )
                else:
                    size = os.path.getsize(file_path)
                size_mb = size / (1024 * 1024)
                info_text += f"‚úÖ {description}: {size_mb:.3f} –ú–ë\n"
            else:
                info_text += f"‚ùå {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω\n"

        msg.setInformativeText(info_text)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        open_folder_btn = msg.addButton(
            "üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è", QMessageBox.ButtonRole.ActionRole
        )
        backup_btn = msg.addButton(
            "üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", QMessageBox.ButtonRole.ActionRole
        )
        msg.addButton("OK", QMessageBox.ButtonRole.AcceptRole)

        msg.exec()

        if msg.clickedButton() == open_folder_btn:
            self.open_profile_folder()
        elif msg.clickedButton() == backup_btn:
            self.backup_profile()

    def open_profile_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ"""
        try:
            profile_path = self.browser_profile.profile_dir
            import subprocess
            import platform

            system = platform.system()
            if system == "Windows":
                subprocess.run(["explorer", profile_path])
            elif system == "Darwin":  # macOS
                subprocess.run(["open", profile_path])
            else:  # Linux
                subprocess.run(["xdg-open", profile_path])

            self.update_status_bar(f"üìÇ –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {profile_path}")
        except Exception as e:
            QMessageBox.warning(
                self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è:\n{e}"
            )

    def backup_profile(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            backup_path = self.browser_profile.backup_profile_data()
            if backup_path:
                QMessageBox.information(
                    self,
                    "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞",
                    f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–∑–¥–∞–Ω–∞:\n{backup_path}\n\n"
                    "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º.",
                )
                self.update_status_bar("üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–∑–¥–∞–Ω–∞")
            else:
                QMessageBox.warning(
                    self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–æ—Ñ–∏–ª—è"
                )
        except Exception as e:
            QMessageBox.warning(
                self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:\n{e}"
            )

    def setup_adblock(self):
        if self.db_manager.get_setting("adblock_enabled", "true") == "true":
            self.toggle_adblock(True)

    def show_download_progress(self, download, filename, download_path):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            progress_dialog = QProgressDialog(
                f"–ó–∞–≥—Ä—É–∑–∫–∞: {filename}", "–û—Ç–º–µ–Ω–∞", 0, 100, self
            )
            progress_dialog.setWindowTitle("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
            progress_dialog.setAutoClose(False)
            progress_dialog.setAutoReset(False)
            progress_dialog.show()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏–∞–ª–æ–≥
            self.active_downloads[download] = {
                "filename": filename,
                "path": download_path,
                "progress": 0,
                "dialog": progress_dialog,
            }

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            progress_dialog.canceled.connect(lambda: self.cancel_download(download))

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑–æ–∫
            if hasattr(self, "download_manager"):
                # –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–∫—Ä—ã—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
                url = getattr(download, "url", lambda: download_path)()
                if hasattr(url, "toString"):
                    url = url.toString()

                self.download_manager.add_download(url, download_path)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
            self.update_status_bar(f"üì• –ù–∞—á–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∞: {filename}")

        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    def cancel_download(self, download):
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É"""
        try:
            if hasattr(download, "cancel"):
                download.cancel()

            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
            if download in self.active_downloads:
                del self.active_downloads[download]

            self.update_status_bar("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    def open_download_folder(self, file_path):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º"""
        try:
            import subprocess
            import platform

            system = platform.system()
            if system == "Windows":
                subprocess.run(["explorer", "/select,", file_path])
            elif system == "Darwin":  # macOS
                subprocess.run(["open", "-R", file_path])
            else:  # Linux
                subprocess.run(["xdg-open", os.path.dirname(file_path)])
        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏: {e}")
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –æ—Ç–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫—É
            try:
                import webbrowser

                webbrowser.open(f"file://{os.path.dirname(file_path)}")
            except Exception as e2:
                logger.error(f"üÜò –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")

    def toggle_adblock(self, enabled):
        if enabled:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏–ª–∏ –±–∞–∑–æ–≤—ã–π AdBlock –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if self.use_advanced_adblock:
                self.current_profile.setUrlRequestInterceptor(self.adblock_interceptor)
            else:
                self.current_profile.setUrlRequestInterceptor(
                    self.legacy_adblock_interceptor
                )
        else:
            self.current_profile.setUrlRequestInterceptor(None)

    def toggle_adblock_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–∂–¥—É –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∏ –±–∞–∑–æ–≤—ã–º AdBlock"""
        self.use_advanced_adblock = not self.use_advanced_adblock
        if self.db_manager.get_setting("adblock_enabled", "true") == "true":
            self.toggle_adblock(True)

        mode_text = "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" if self.use_advanced_adblock else "–±–∞–∑–æ–≤—ã–π"
        self.db_manager.save_setting(
            "adblock_mode", "advanced" if self.use_advanced_adblock else "basic"
        )
        self.update_status_bar(f"AdBlock —Ä–µ–∂–∏–º: {mode_text}")
        logger.info(f"‚úÖ AdBlock —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: {mode_text}")

    def get_adblock_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if self.use_advanced_adblock:
            return self.browser_profile.get_adblock_stats()
        return 0

    def show_adblock_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ AdBlock"""
        blocked_count = self.get_adblock_stats()
        mode_text = "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" if self.use_advanced_adblock else "–±–∞–∑–æ–≤—ã–π"

        msg = QMessageBox(self)
        msg.setIcon(QMessageBox.Icon.Information)
        msg.setWindowTitle("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AdBlock")
        msg.setText(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã")
        msg.setInformativeText(
            f"–†–µ–∂–∏–º AdBlock: {mode_text}\n"
            f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ URL: {blocked_count}\n\n"
            f"–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç EasyList –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞.\n"
            f"–ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
        )
        msg.exec()

    def view_blocked_urls(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ URL"""
        dialog = QDialog(self)
        dialog.setWindowTitle("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ URL")
        # dialog.setGeometry(100, 100, 600, 400)

        layout = QVBoxLayout()

        text_edit = QTextEdit()
        text_edit.setReadOnly(True)
        text_edit.setLineWrapMode(QTextEdit.LineWrapMode.NoWrap)
        text_edit.setPlaceholderText("–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ URL")
        text_edit.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)

        #

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö URL
        # blocked_urls = []  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        text_edit.setText("\nURL-".join(blocked_urls))

        layout.addWidget(text_edit)
        dialog.setLayout(layout)
        dialog.resize(800, 600)
        dialog.show()

    def clear_adblock_stats(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if self.use_advanced_adblock:
            self.browser_profile.clear_adblock_stats()

        QMessageBox.information(
            self, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ AdBlock –æ—á–∏—â–µ–Ω–∞."
        )

    def new_tab(self, url="https://www.google.com", profile=None):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ url —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
            if not isinstance(url, str):
                # print(
                #    f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: URL –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π: {url}, –∏—Å–ø–æ–ª—å–∑—É–µ–º Google"
                # )
                logger.warning(
                    f"üö© –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: URL –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π: {url}, –∏—Å–ø–æ–ª—å–∑—É–µ–º Google"
                )
                url = "https://www.google.com"

            tab = BrowserTab(url, self.current_profile)
            index = self.tab_widget.addTab(tab, "–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞")
            self.tab_widget.setCurrentIndex(index)

            tab.urlChanged.connect(self.url_changed)
            tab.titleChanged.connect(self.title_changed)
            tab.loadProgress.connect(self.load_progress)
            tab.iconChanged.connect(self.icon_changed)
            tab.zoomChanged.connect(self.zoom_changed)

            return tab
        except Exception as e:
            # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏: {e}")
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏: {e}")
            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è
            try:
                tab = BrowserTab(
                    url if isinstance(url, str) else "https://www.google.com", None
                )
                index = self.tab_widget.addTab(tab, "–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞")
                self.tab_widget.setCurrentIndex(index)

                tab.urlChanged.connect(self.url_changed)
                tab.titleChanged.connect(self.title_changed)
                tab.loadProgress.connect(self.load_progress)
                tab.iconChanged.connect(self.icon_changed)
                tab.zoomChanged.connect(self.zoom_changed)

                return tab
            except Exception as e2:
                # print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏: {e2}")
                logger.error(f"üÜò –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏: {e2}")
                return None

    def close_tab(self, index):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.tab_widget.count() > 1:
            # –ü–æ–ª—É—á–∞–µ–º –≤–∫–ª–∞–¥–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            tab_widget = self.tab_widget.widget(index)

            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã WebEnginePage
            if tab_widget and hasattr(tab_widget, "web_view"):
                web_view = tab_widget.web_view
                if web_view:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                    web_view.stop()
                    # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    page = web_view.page()
                    if page:
                        logger.info("–û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É WebEnginePage...")
                        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
                        try:
                            page.disconnect()
                            page.deleteLater()
                        except:
                            pass
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        web_view.setPage(None)
                    # –û—á–∏—â–∞–µ–º –≤–µ–±-–≤—å—é
                    web_view.setParent(None)

            # –£–¥–∞–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É
            self.tab_widget.removeTab(index)

            # –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –≤–∫–ª–∞–¥–∫–∏
            if tab_widget:
                tab_widget.setParent(None)
                tab_widget.deleteLater()

            logger.info("‚úÖ –í–∫–ª–∞–¥–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π WebEnginePage")
        else:
            self.close()

    def tab_changed(self, index):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É –≤–∫–ª–∞–¥–∫–∏"""
        if index >= 0:
            current_tab = self.tab_widget.widget(index)
            if current_tab:
                try:
                    self.address_bar.setText(current_tab.get_current_url())
                except Exception as e:
                    # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏: {e}")
                    logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏: {e}")
                    self.address_bar.setText("")

    def navigate_to_url(self):
        url = self.address_bar.text()
        current_tab = self.tab_widget.currentWidget()
        if current_tab:
            current_tab.navigate_to_url(url)

    def address_bar_click(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —â–µ–ª—á–æ–∫ –º—ã—à–∏ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"""
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        QLineEdit.mousePressEvent(self.address_bar, event)

        # –ó–∞—Ç–µ–º –≤—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        self.address_bar.selectAll()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
        self.update_status_bar(
            "–ê–¥—Ä–µ—Å –≤—ã–¥–µ–ª–µ–Ω - –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
        )

    def setup_address_bar(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.address_bar.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.address_bar.customContextMenuRequested.connect(
            self.show_address_bar_context_menu
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞
        self.address_bar.focusInEvent = self.address_bar_focus_in

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        self.address_bar.setStyleSheet("""
            QLineEdit {
                padding: 5px 5px;
                border: 2px solid #ddd;
                border-radius: 15px;
                font-size: 12px;
                background-color: white;
            }
            QLineEdit:focus {
                border: 2px solid #4285f4;
                background-color: #fff;
            }
            QLineEdit:hover {
                border: 2px solid #bbb;
            }
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        self.address_bar.setPlaceholderText("üîç –í–≤–µ–¥–∏—Ç–µ URL –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        logger.info("‚úÖ –ê–¥—Ä–µ—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

    def address_bar_focus_in(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π"""
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        QLineEdit.focusInEvent(self.address_bar, event)

        # –í—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ–∫—É—Å–∞
        self.address_bar.selectAll()

    def show_address_bar_context_menu(self, position):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        menu = QMenu(self)

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if self.address_bar.hasSelectedText():
            cut_action = QAction(
                QIcon(os.path.join("images", "cut.png")), "–í—ã—Ä–µ–∑–∞—Ç—å", self
            )
            cut_action.triggered.connect(self.address_bar.cut)
            menu.addAction(cut_action)

            copy_action = QAction(
                QIcon(os.path.join("images", "copy.png")), "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", self
            )
            copy_action.triggered.connect(self.address_bar.copy)
            menu.addAction(copy_action)

        # –í—Å—Ç–∞–≤–∏—Ç—å
        # from PyQt6.QtWidgets import QApplication

        clipboard = QApplication.clipboard()
        if clipboard.text():
            paste_action = QAction(
                QIcon(os.path.join("images", "paste.png")), "–í—Å—Ç–∞–≤–∏—Ç—å", self
            )
            paste_action.triggered.connect(self.address_bar.paste)
            menu.addAction(paste_action)

            paste_and_go_action = QAction(
                QIcon(os.path.join("images", "paste_.png")),
                "–í—Å—Ç–∞–≤–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏",
                self,
            )
            paste_and_go_action.triggered.connect(self.paste_and_go)
            menu.addAction(paste_and_go_action)

        menu.addSeparator()

        # –í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë
        select_all_action = QAction(
            QIcon(os.path.join("images", "select.png")), "–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë", self
        )
        select_all_action.triggered.connect(self.address_bar.selectAll)
        menu.addAction(select_all_action)

        # –û—á–∏—Å—Ç–∏—Ç—å
        clear_action = QAction(
            QIcon(os.path.join("images", "clear.png")), "–û—á–∏—Å—Ç–∏—Ç—å", self
        )
        clear_action.triggered.connect(self.address_bar.clear)
        menu.addAction(clear_action)

        menu.addSeparator()

        # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_action = QAction(
            QIcon(os.path.join("images", "search.png")), "–ü–æ–∏—Å–∫ –≤ Google", self
        )
        search_action.triggered.connect(self.search_in_google)
        menu.addAction(search_action)

        menu.exec(self.address_bar.mapToGlobal(position))

    def paste_and_go(self):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ –∞–¥—Ä–µ—Å—É"""
        self.address_bar.paste()
        self.navigate_to_url()

    def search_in_google(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ Google"""
        selected_text = self.address_bar.selectedText()
        if not selected_text:
            selected_text = self.address_bar.text()

        if selected_text:
            search_url = f"https://www.google.com/search?q={selected_text}"
            self.address_bar.setText(search_url)
            self.navigate_to_url()

    def url_changed(self, url):
        sender = self.sender()
        if sender == self.tab_widget.currentWidget():
            self.address_bar.setText(url)
            if url and url != "about:blank":
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ä–∞–∑—É
                self.save_to_history(url, sender)

    def title_changed(self, title):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        sender = self.sender()
        current_index = self.tab_widget.indexOf(sender)
        if current_index >= 0:
            self.tab_widget.setTabText(
                current_index, title[:30] + "..." if len(title) > 30 else title
            )

    def icon_changed(self, icon):
        sender = self.sender()
        current_index = self.tab_widget.indexOf(sender)
        if current_index >= 0:
            self.tab_widget.setTabIcon(current_index, icon)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ URL
            if sender and hasattr(sender, "get_current_url"):
                url = sender.get_current_url()
                if url and url != "about:blank" and icon and not icon.isNull():
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    self.db_manager.update_history_icon(url, icon)

    def load_progress(self, progress):
        if progress < 100:
            self.progress_bar.setValue(progress)
            self.progress_bar.setVisible(True)
        else:
            self.progress_bar.setVisible(False)

            # –ö–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É
            sender = self.sender()
            if sender and hasattr(sender, "get_current_url"):
                url = sender.get_current_url()
                if url and url != "about:blank":
                    # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    QTimer.singleShot(
                        2000, lambda: self.try_update_favicon(url, sender)
                    )

    def try_update_favicon(self, url, tab):
        """–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–≤–∏–∫–æ–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            if tab and hasattr(tab, "get_current_icon"):
                icon = tab.get_current_icon()
                if icon and not icon.isNull():
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∏—Å—Ç–æ—Ä–∏–∏
                    self.db_manager.update_history_icon(url, icon)
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –¥–ª—è {url}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–≤–∏–∫–æ–Ω–∞: {e}")

    def go_back(self):
        current_tab = self.tab_widget.currentWidget()
        if current_tab:
            current_tab.back()

    def go_forward(self):
        current_tab = self.tab_widget.currentWidget()
        if current_tab:
            current_tab.forward()

    def reload_page(self):
        current_tab = self.tab_widget.currentWidget()
        if current_tab:
            current_tab.reload()

    def go_home(self):
        current_tab = self.tab_widget.currentWidget()
        if current_tab:
            current_tab.navigate_to_url("https://www.google.com")

    def add_bookmark(self):
        current_tab = self.tab_widget.currentWidget()
        if current_tab:
            url = current_tab.get_current_url()
            title = current_tab.get_current_title()
            icon = current_tab.get_current_icon()

            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –¥–æ–±–∞–≤–∏—Ç—å –ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            reply = QMessageBox.question(
                self,
                "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É",
                f"–î–æ–±–∞–≤–∏—Ç—å '{title}' –≤ –∑–∞–∫–ª–∞–¥–∫–∏?\n\n–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?",
                QMessageBox.StandardButton.Yes
                | QMessageBox.StandardButton.No
                | QMessageBox.StandardButton.Cancel,
            )

            if reply == QMessageBox.StandardButton.Yes:
                self.db_manager.add_bookmark(url, title, icon, is_favorite=True)
                self.favorites_bar.refresh_favorites()
                QMessageBox.information(
                    self, "–ó–∞–∫–ª–∞–¥–∫–∞", "–ó–∞–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"
                )
            elif reply == QMessageBox.StandardButton.No:
                self.db_manager.add_bookmark(url, title, icon, is_favorite=False)
                QMessageBox.information(self, "–ó–∞–∫–ª–∞–¥–∫–∞", "–ó–∞–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    def new_window(self):
        new_browser = MainBrowser(self.browser_profile.profile_name)
        new_browser.show()

    def new_profile_window(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–∫–Ω–æ —Å –Ω–æ–≤—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º"""
        profile_name, ok = QInputDialog.getText(
            self, "–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è:"
        )
        if ok and profile_name:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            new_browser = MainBrowser(profile_name)
            new_browser.show()

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            if hasattr(self, "custom_rules"):
                for rule in self.custom_rules:
                    new_browser.browser_profile.add_custom_rule(rule)

    def disable_adblock_for_site(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç AdBlock –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∞–π—Ç–∞"""
        current_tab = self.tab_widget.currentWidget()
        if current_tab:
            url = current_tab.get_current_url()
            if url:
                domain = urlparse(url).netloc

                reply = QMessageBox.question(
                    self,
                    "–û—Ç–∫–ª—é—á–∏—Ç—å AdBlock",
                    f"–û—Ç–∫–ª—é—á–∏—Ç—å AdBlock –¥–ª—è {domain}?\n\n"
                    "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç, –µ—Å–ª–∏ —Å–∞–π—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                    QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                )

                if reply == QMessageBox.StandardButton.Yes:
                    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º AdBlock
                    self.current_profile.setUrlRequestInterceptor(None)

                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    current_tab.reload()

                    self.update_status_bar(f"AdBlock –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è {domain}")

                    QMessageBox.information(
                        self,
                        "AdBlock –æ—Ç–∫–ª—é—á–µ–Ω",
                        f"AdBlock –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è {domain}.\n"
                        "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                    )

    def add_custom_adblock_rule(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ AdBlock"""
        rule_text, ok = QInputDialog.getText(
            self, "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ", "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ AdBlock:"
        )
        if ok and rule_text:
            self.browser_profile.add_custom_rule(rule_text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π
            if not hasattr(self, "custom_rules"):
                self.custom_rules = []
            self.custom_rules.append(rule_text)

            QMessageBox.information(
                self, "–ü—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", f"–ü—Ä–∞–≤–∏–ª–æ '{rule_text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ AdBlock."
            )

    def show_history(self):
        history_dialog = HistoryManager(self.db_manager, self)
        history_dialog.exec()

    def show_bookmarks(self):
        bookmark_dialog = BookmarkManager(self.db_manager, self)
        bookmark_dialog.exec()

    def show_downloads(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑–æ–∫"""
        if not hasattr(self, "download_manager"):
            self.download_manager = DownloadManager(self.db_manager, self)
        self.download_manager.show()
        self.download_manager.raise_()
        self.download_manager.activateWindow()

    def show_settings(self):
        settings_dialog = SettingsManager(self.db_manager, self, self)
        settings_dialog.exec()

    def clear_browser_data(self):
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–∞?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
        )
        if reply == QMessageBox.StandardButton.Yes:
            self.db_manager.clear_all_data()
            self.current_profile.clearHttpCache()
            QMessageBox.information(
                self, "–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã", "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–∞ –æ—á–∏—â–µ–Ω—ã!"
            )

    def reset_for_google_auth(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google"""
        # –û—á–∏—â–∞–µ–º –∫—É–∫–∏ –∏ –∫—ç—à
        self.current_profile.clearHttpCache()
        self.current_profile.cookieStore().deleteAllCookies()

        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º AdBlock
        self.current_profile.setUrlRequestInterceptor(None)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å Google
        self.new_tab("https://accounts.google.com")

        QMessageBox.information(
            self,
            "–°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google.\n"
            "AdBlock –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.\n"
            "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π.",
        )

    def enable_google_mode(self):
        """–í–∫–ª—é—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫
        self.current_profile.setUrlRequestInterceptor(None)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent Chrome
        self.current_profile.setHttpUserAgent(
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
            "(KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        )

        self.new_tab("https://www.google.com")

        QMessageBox.information(
            self,
            "–†–µ–∂–∏–º Google",
            "–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Google —Å–µ—Ä–≤–∏—Å–∞–º–∏.\n"
            "–í—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.",
        )

    def toggle_favorites_bar(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞–Ω–µ–ª–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        if self.favorites_bar.isVisible():
            self.favorites_bar.hide()
            self.db_manager.save_setting("favorites_bar_visible", "false")
        else:
            self.favorites_bar.show()
            self.db_manager.save_setting("favorites_bar_visible", "true")

    def update_status_bar(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.status_bar.showMessage(message, 5000)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ 5 —Å–µ–∫—É–Ω–¥

    def zoom_changed(self, zoom_factor):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞"""
        zoom_percent = int(zoom_factor * 100)
        self.zoom_label.setText(f"{zoom_percent}%")

    def zoom_in(self):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞—Å—à—Ç–∞–± —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏"""
        current_tab = self.tab_widget.currentWidget()
        if current_tab and hasattr(current_tab, "zoom_in"):
            current_tab.zoom_in()
            self.update_status_bar("üîç+ –ú–∞—Å—à—Ç–∞–± —É–≤–µ–ª–∏—á–µ–Ω")

    def zoom_out(self):
        """–£–º–µ–Ω—å—à–∞–µ—Ç –º–∞—Å—à—Ç–∞–± —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏"""
        current_tab = self.tab_widget.currentWidget()
        if current_tab and hasattr(current_tab, "zoom_out"):
            current_tab.zoom_out()
            self.update_status_bar("üîç- –ú–∞—Å—à—Ç–∞–± —É–º–µ–Ω—å—à–µ–Ω")

    def reset_zoom(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º–∞—Å—à—Ç–∞–± —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏ –∫ 100%"""
        current_tab = self.tab_widget.currentWidget()
        if current_tab and hasattr(current_tab, "reset_zoom"):
            current_tab.reset_zoom()
            self.update_status_bar("üîç –ú–∞—Å—à—Ç–∞–± —Å–±—Ä–æ—à–µ–Ω –∫ 100%")

    def set_zoom(self, zoom_factor):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Å—à—Ç–∞–± –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏"""
        current_tab = self.tab_widget.currentWidget()
        if current_tab and hasattr(current_tab, "web_view"):
            current_tab.web_view.setZoomFactor(zoom_factor)
            zoom_percent = int(zoom_factor * 100)
            self.update_status_bar(f"üîç –ú–∞—Å—à—Ç–∞–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {zoom_percent}%")

    def toggle_fullscreen(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
        if self.isFullScreen():
            self.showNormal()
            self.update_status_bar("üì∫ –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        else:
            self.showFullScreen()
            self.update_status_bar("üì∫ –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω (F11 –¥–ª—è –≤—ã—Ö–æ–¥–∞)")

    def get_current_zoom(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–± –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        current_tab = self.tab_widget.currentWidget()
        if current_tab and hasattr(current_tab, "get_current_zoom"):
            return current_tab.get_current_zoom()
        return 1.0

    def zoom_label_clicked(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É –º–∞—Å—à—Ç–∞–±–∞"""
        # –ü—Ä–∏ –∫–ª–∏–∫–µ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±
        if event.button() == Qt.MouseButton.LeftButton:
            self.reset_zoom()
        # –ü—Ä–∏ –∫–ª–∏–∫–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –º–∞—Å—à—Ç–∞–±–∞
        elif event.button() == Qt.MouseButton.RightButton:
            global_pos = self.zoom_label.mapToGlobal(event.pos())
            self.show_zoom_menu(global_pos)

    def show_zoom_menu(self, position):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏ –º–∞—Å—à—Ç–∞–±–∞"""
        menu = QMenu(self)

        # –¢–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–±
        current_zoom = self.get_current_zoom()
        current_percent = int(current_zoom * 100)

        menu.addAction(
            QIcon(os.path.join("images", "zoom.png")),
            f"–¢–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–±: {current_percent}%",
        ).setEnabled(False)
        menu.addSeparator()

        # –ë—ã—Å—Ç—Ä—ã–µ –æ–ø—Ü–∏–∏
        zoom_in_action = menu.addAction(
            QIcon(os.path.join("images", "zoomin.png")), "–£–≤–µ–ª–∏—á–∏—Ç—å (Ctrl++)"
        )
        zoom_in_action.triggered.connect(self.zoom_in)

        zoom_out_action = menu.addAction(
            QIcon(os.path.join("images", "zoomout.png")), "–£–º–µ–Ω—å—à–∏—Ç—å (Ctrl+-)"
        )
        zoom_out_action.triggered.connect(self.zoom_out)

        reset_action = menu.addAction(
            QIcon(os.path.join("images", "zoomreset.png")), "–°–±—Ä–æ—Å–∏—Ç—å –∫ 100% (Ctrl+0)"
        )
        reset_action.triggered.connect(self.reset_zoom)

        menu.addSeparator()

        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        zoom_values = [50, 75, 100, 125, 150, 200, 300]
        for zoom in zoom_values:
            action = menu.addAction(f"{zoom}%")
            action.triggered.connect(lambda checked, z=zoom: self.set_zoom(z / 100))

            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–±
            if abs(current_percent - zoom) < 5:
                action.setEnabled(False)
                action.setText(f"‚óè {zoom}%")

        menu.exec(position)

    def open_html_file(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç HTML —Ñ–∞–π–ª"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–û—Ç–∫—Ä—ã—Ç—å HTML —Ñ–∞–π–ª", "", "HTML —Ñ–∞–π–ª—ã (*.html *.htm);;–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"
        )
        if file_path:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ URL
            file_url = QUrl.fromLocalFile(file_path)
            self.new_tab(file_url.toString())
            logger.info(f"‚úÖ –û—Ç–∫—Ä—ã—Ç HTML —Ñ–∞–π–ª: {file_path}")

    def save_current_page_mhtml(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ MHTML"""
        current_tab = self.tab_widget.currentWidget()
        if current_tab:
            current_tab.save_page_as_mhtml()
            logger.info("‚úÖ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ MHTML")

    def save_current_page_html(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ HTML"""
        current_tab = self.tab_widget.currentWidget()
        if current_tab:
            current_tab.save_page_as_html()
        logger.info("‚úÖ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ HTML")

    def save_current_page_pdf(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ PDF"""
        current_tab = self.tab_widget.currentWidget()
        if current_tab:
            current_tab.save_page_as_pdf()
        logger.info("‚úÖ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ PDF")

    def save_html_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ HTML (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)"""
        self.save_current_page_html()
        logger.warning(
            "‚ö†Ô∏è –ú–µ—Ç–æ–¥ save_html_file —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ save_current_page_html"
        )

    def save_to_history(self, url, tab):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç URL –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –∏–∫–æ–Ω–∫–æ–π"""
        try:
            if (
                tab
                and hasattr(tab, "get_current_title")
                and hasattr(tab, "get_current_icon")
            ):
                title = tab.get_current_title()
                icon = tab.get_current_icon()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∫–æ–Ω–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                if icon and not icon.isNull():
                    self.db_manager.add_history(url, title, icon)
                else:
                    # –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –ø—É—Å—Ç–∞—è, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ—ë –ø–æ–∑–∂–µ
                    self.db_manager.add_history(url, title, None)
                    # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    QTimer.singleShot(3000, lambda: self.update_history_icon(url, tab))
        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –∏–∫–æ–Ω–∫–∏
            try:
                self.db_manager.add_history(
                    url, tab.get_current_title() if tab else "", None
                )
            except:
                pass

    def update_history_icon(self, url, tab):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–∫–æ–Ω–∫—É –≤ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞"""
        try:
            if tab and hasattr(tab, "get_current_icon"):
                icon = tab.get_current_icon()
                if icon and not icon.isNull():
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    self.db_manager.update_history_icon(url, icon)
        except Exception as e:
            logger.error(f"üÜò –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    # def closeEvent(self, event):
    #    self.page.deleteLater()  # —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    #    super().closeEvent(event)


def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è QtWebEngine - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Google
    os.environ["QTWEBENGINE_CHROMIUM_FLAGS"] = (
        "--disable-features=VizDisplayCompositor "
        "--ignore-certificate-errors-spki-list "
        "--ignore-ssl-errors-ignore-certificate-errors "
        "--disable-extensions-http-throttling "
        "--enable-features=WebRTC-H264WithOpenH264FFmpeg "
        "--autoplay-policy=no-user-gesture-required "
        "--disable-blink-features=AutomationControlled "
        "--disable-infobars"
    )

    app = QApplication(sys.argv)
    # app.setStyle("Fusion")
    app.setApplicationName("OBrowser")
    app.setApplicationVersion("1.0")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    app.setWindowIcon(QIcon(os.path.join("images", "browser.png")))

    browser = MainBrowser()
    browser.showMaximized()

    sys.exit(app.exec())


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PyQt6
    main()
